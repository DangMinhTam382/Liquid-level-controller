CCS PCM C Compiler, Version 5.025, 12168               30-Dec-21 21:59

               Filename:   F:\211\Dien_Tu_Ung_Dung\BTL\DVD\CCS\PICC_Button2\main.lst

               ROM used:   2727 words (33%)
                           Largest free fragment is 2048
               RAM used:   64 (17%) at main() level
                           135 (37%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
018B:  MOVLW  8E
018C:  MOVWF  77
018D:  BSF    03.5
018E:  MOVF   2E,W
018F:  MOVWF  78
0190:  MOVF   2D,W
0191:  MOVWF  79
0192:  CLRF   7A
0193:  MOVF   78,F
0194:  BTFSS  03.2
0195:  GOTO   1A0
0196:  MOVF   79,W
0197:  MOVWF  78
0198:  CLRF   79
0199:  MOVLW  08
019A:  SUBWF  77,F
019B:  MOVF   78,F
019C:  BTFSS  03.2
019D:  GOTO   1A0
019E:  CLRF   77
019F:  GOTO   1A8
01A0:  BCF    03.0
01A1:  BTFSC  78.7
01A2:  GOTO   1A7
01A3:  RLF    79,F
01A4:  RLF    78,F
01A5:  DECF   77,F
01A6:  GOTO   1A0
01A7:  BCF    78.7
01A8:  BCF    03.5
01A9:  RETURN
01AA:  BSF    03.5
01AB:  MOVF   3A,W
01AC:  BTFSC  03.2
01AD:  GOTO   21B
01AE:  MOVWF  42
01AF:  MOVF   3E,W
01B0:  BTFSC  03.2
01B1:  GOTO   21B
01B2:  ADDWF  42,F
01B3:  BTFSC  03.0
01B4:  GOTO   1BC
01B5:  MOVLW  7F
01B6:  SUBWF  42,F
01B7:  BTFSS  03.0
01B8:  GOTO   21B
01B9:  BTFSC  03.2
01BA:  GOTO   21B
01BB:  GOTO   1C0
01BC:  MOVLW  81
01BD:  ADDWF  42,F
01BE:  BTFSC  03.0
01BF:  GOTO   21B
01C0:  MOVF   42,W
01C1:  MOVWF  77
01C2:  CLRF   78
01C3:  CLRF   79
01C4:  CLRF   7A
01C5:  MOVF   3B,W
01C6:  MOVWF  46
01C7:  BSF    46.7
01C8:  MOVF   3C,W
01C9:  MOVWF  45
01CA:  MOVF   3D,W
01CB:  MOVWF  44
01CC:  MOVLW  18
01CD:  MOVWF  42
01CE:  CLRF   43
01CF:  BTFSS  44.0
01D0:  GOTO   1E9
01D1:  MOVF   41,W
01D2:  ADDWF  7A,F
01D3:  BTFSS  03.0
01D4:  GOTO   1DB
01D5:  INCF   79,F
01D6:  BTFSS  03.2
01D7:  GOTO   1DB
01D8:  INCF   78,F
01D9:  BTFSC  03.2
01DA:  BSF    43.7
01DB:  MOVF   40,W
01DC:  ADDWF  79,F
01DD:  BTFSS  03.0
01DE:  GOTO   1E2
01DF:  INCF   78,F
01E0:  BTFSC  03.2
01E1:  BSF    43.7
01E2:  MOVF   3F,W
01E3:  MOVWF  3C
01E4:  BSF    3C.7
01E5:  MOVF   3C,W
01E6:  ADDWF  78,F
01E7:  BTFSC  03.0
01E8:  BSF    43.7
01E9:  RLF    43,F
01EA:  RRF    78,F
01EB:  RRF    79,F
01EC:  RRF    7A,F
01ED:  RRF    46,F
01EE:  RRF    45,F
01EF:  RRF    44,F
01F0:  BCF    03.0
01F1:  DECFSZ 42,F
01F2:  GOTO   1CE
01F3:  MOVLW  01
01F4:  ADDWF  77,F
01F5:  BTFSC  03.0
01F6:  GOTO   21B
01F7:  BTFSC  78.7
01F8:  GOTO   200
01F9:  RLF    46,F
01FA:  RLF    7A,F
01FB:  RLF    79,F
01FC:  RLF    78,F
01FD:  DECF   77,F
01FE:  BTFSC  03.2
01FF:  GOTO   21B
0200:  BTFSS  46.7
0201:  GOTO   211
0202:  INCF   7A,F
0203:  BTFSS  03.2
0204:  GOTO   211
0205:  INCF   79,F
0206:  BTFSS  03.2
0207:  GOTO   211
0208:  INCF   78,F
0209:  BTFSS  03.2
020A:  GOTO   211
020B:  RRF    78,F
020C:  RRF    79,F
020D:  RRF    7A,F
020E:  INCF   77,F
020F:  BTFSC  03.2
0210:  GOTO   21B
0211:  MOVF   3B,W
0212:  MOVWF  43
0213:  MOVF   3F,W
0214:  XORWF  43,F
0215:  BTFSS  43.7
0216:  GOTO   219
0217:  BSF    78.7
0218:  GOTO   21F
0219:  BCF    78.7
021A:  GOTO   21F
021B:  CLRF   77
021C:  CLRF   78
021D:  CLRF   79
021E:  CLRF   7A
021F:  BCF    03.5
0220:  RETURN
0221:  BSF    03.5
0222:  MOVF   31,W
0223:  BTFSC  03.2
0224:  GOTO   2E7
0225:  MOVWF  3D
0226:  MOVF   35,W
0227:  BTFSC  03.2
0228:  GOTO   2E7
0229:  SUBWF  3D,F
022A:  BTFSS  03.0
022B:  GOTO   231
022C:  MOVLW  7F
022D:  ADDWF  3D,F
022E:  BTFSC  03.0
022F:  GOTO   2E7
0230:  GOTO   237
0231:  MOVLW  81
0232:  SUBWF  3D,F
0233:  BTFSS  03.0
0234:  GOTO   2E7
0235:  BTFSC  03.2
0236:  GOTO   2E7
0237:  MOVF   3D,W
0238:  MOVWF  77
0239:  CLRF   78
023A:  CLRF   79
023B:  CLRF   7A
023C:  CLRF   3C
023D:  MOVF   32,W
023E:  MOVWF  3B
023F:  BSF    3B.7
0240:  MOVF   33,W
0241:  MOVWF  3A
0242:  MOVF   34,W
0243:  MOVWF  39
0244:  MOVLW  19
0245:  MOVWF  3D
0246:  MOVF   38,W
0247:  SUBWF  39,F
0248:  BTFSC  03.0
0249:  GOTO   25A
024A:  MOVLW  01
024B:  SUBWF  3A,F
024C:  BTFSC  03.0
024D:  GOTO   25A
024E:  SUBWF  3B,F
024F:  BTFSC  03.0
0250:  GOTO   25A
0251:  SUBWF  3C,F
0252:  BTFSC  03.0
0253:  GOTO   25A
0254:  INCF   3C,F
0255:  INCF   3B,F
0256:  INCF   3A,F
0257:  MOVF   38,W
0258:  ADDWF  39,F
0259:  GOTO   28C
025A:  MOVF   37,W
025B:  SUBWF  3A,F
025C:  BTFSC  03.0
025D:  GOTO   275
025E:  MOVLW  01
025F:  SUBWF  3B,F
0260:  BTFSC  03.0
0261:  GOTO   275
0262:  SUBWF  3C,F
0263:  BTFSC  03.0
0264:  GOTO   275
0265:  INCF   3C,F
0266:  INCF   3B,F
0267:  MOVF   37,W
0268:  ADDWF  3A,F
0269:  MOVF   38,W
026A:  ADDWF  39,F
026B:  BTFSS  03.0
026C:  GOTO   28C
026D:  INCF   3A,F
026E:  BTFSS  03.2
026F:  GOTO   28C
0270:  INCF   3B,F
0271:  BTFSS  03.2
0272:  GOTO   28C
0273:  INCF   3C,F
0274:  GOTO   28C
0275:  MOVF   36,W
0276:  IORLW  80
0277:  SUBWF  3B,F
0278:  BTFSC  03.0
0279:  GOTO   28B
027A:  MOVLW  01
027B:  SUBWF  3C,F
027C:  BTFSC  03.0
027D:  GOTO   28B
027E:  INCF   3C,F
027F:  MOVF   36,W
0280:  IORLW  80
0281:  ADDWF  3B,F
0282:  MOVF   37,W
0283:  ADDWF  3A,F
0284:  BTFSS  03.0
0285:  GOTO   269
0286:  INCF   3B,F
0287:  BTFSS  03.2
0288:  GOTO   269
0289:  INCF   3C,F
028A:  GOTO   269
028B:  BSF    7A.0
028C:  DECFSZ 3D,F
028D:  GOTO   28F
028E:  GOTO   29A
028F:  BCF    03.0
0290:  RLF    39,F
0291:  RLF    3A,F
0292:  RLF    3B,F
0293:  RLF    3C,F
0294:  BCF    03.0
0295:  RLF    7A,F
0296:  RLF    79,F
0297:  RLF    78,F
0298:  RLF    3E,F
0299:  GOTO   246
029A:  BTFSS  3E.0
029B:  GOTO   2A2
029C:  BCF    03.0
029D:  RRF    78,F
029E:  RRF    79,F
029F:  RRF    7A,F
02A0:  RRF    3E,F
02A1:  GOTO   2A5
02A2:  DECF   77,F
02A3:  BTFSC  03.2
02A4:  GOTO   2E7
02A5:  BTFSC  3E.7
02A6:  GOTO   2CE
02A7:  BCF    03.0
02A8:  RLF    39,F
02A9:  RLF    3A,F
02AA:  RLF    3B,F
02AB:  RLF    3C,F
02AC:  MOVF   38,W
02AD:  SUBWF  39,F
02AE:  BTFSC  03.0
02AF:  GOTO   2BA
02B0:  MOVLW  01
02B1:  SUBWF  3A,F
02B2:  BTFSC  03.0
02B3:  GOTO   2BA
02B4:  SUBWF  3B,F
02B5:  BTFSC  03.0
02B6:  GOTO   2BA
02B7:  SUBWF  3C,F
02B8:  BTFSS  03.0
02B9:  GOTO   2DD
02BA:  MOVF   37,W
02BB:  SUBWF  3A,F
02BC:  BTFSC  03.0
02BD:  GOTO   2C5
02BE:  MOVLW  01
02BF:  SUBWF  3B,F
02C0:  BTFSC  03.0
02C1:  GOTO   2C5
02C2:  SUBWF  3C,F
02C3:  BTFSS  03.0
02C4:  GOTO   2DD
02C5:  MOVF   36,W
02C6:  IORLW  80
02C7:  SUBWF  3B,F
02C8:  BTFSC  03.0
02C9:  GOTO   2CE
02CA:  MOVLW  01
02CB:  SUBWF  3C,F
02CC:  BTFSS  03.0
02CD:  GOTO   2DD
02CE:  INCF   7A,F
02CF:  BTFSS  03.2
02D0:  GOTO   2DD
02D1:  INCF   79,F
02D2:  BTFSS  03.2
02D3:  GOTO   2DD
02D4:  INCF   78,F
02D5:  BTFSS  03.2
02D6:  GOTO   2DD
02D7:  INCF   77,F
02D8:  BTFSC  03.2
02D9:  GOTO   2E7
02DA:  RRF    78,F
02DB:  RRF    79,F
02DC:  RRF    7A,F
02DD:  MOVF   32,W
02DE:  MOVWF  3D
02DF:  MOVF   36,W
02E0:  XORWF  3D,F
02E1:  BTFSS  3D.7
02E2:  GOTO   2E5
02E3:  BSF    78.7
02E4:  GOTO   2EB
02E5:  BCF    78.7
02E6:  GOTO   2EB
02E7:  CLRF   77
02E8:  CLRF   78
02E9:  CLRF   79
02EA:  CLRF   7A
02EB:  BCF    03.5
02EC:  RETURN
02ED:  BTFSC  03.1
02EE:  GOTO   2F2
02EF:  MOVLW  C2
02F0:  MOVWF  04
02F1:  BCF    03.7
02F2:  CLRF   77
02F3:  CLRF   78
02F4:  CLRF   79
02F5:  CLRF   7A
02F6:  BSF    03.5
02F7:  CLRF   42
02F8:  CLRF   43
02F9:  CLRF   44
02FA:  CLRF   45
02FB:  MOVF   41,W
02FC:  IORWF  40,W
02FD:  IORWF  3F,W
02FE:  IORWF  3E,W
02FF:  BTFSC  03.2
0300:  GOTO   331
0301:  MOVLW  20
0302:  MOVWF  46
0303:  BCF    03.0
0304:  RLF    3A,F
0305:  RLF    3B,F
0306:  RLF    3C,F
0307:  RLF    3D,F
0308:  RLF    42,F
0309:  RLF    43,F
030A:  RLF    44,F
030B:  RLF    45,F
030C:  MOVF   41,W
030D:  SUBWF  45,W
030E:  BTFSS  03.2
030F:  GOTO   31A
0310:  MOVF   40,W
0311:  SUBWF  44,W
0312:  BTFSS  03.2
0313:  GOTO   31A
0314:  MOVF   3F,W
0315:  SUBWF  43,W
0316:  BTFSS  03.2
0317:  GOTO   31A
0318:  MOVF   3E,W
0319:  SUBWF  42,W
031A:  BTFSS  03.0
031B:  GOTO   32B
031C:  MOVF   3E,W
031D:  SUBWF  42,F
031E:  MOVF   3F,W
031F:  BTFSS  03.0
0320:  INCFSZ 3F,W
0321:  SUBWF  43,F
0322:  MOVF   40,W
0323:  BTFSS  03.0
0324:  INCFSZ 40,W
0325:  SUBWF  44,F
0326:  MOVF   41,W
0327:  BTFSS  03.0
0328:  INCFSZ 41,W
0329:  SUBWF  45,F
032A:  BSF    03.0
032B:  RLF    77,F
032C:  RLF    78,F
032D:  RLF    79,F
032E:  RLF    7A,F
032F:  DECFSZ 46,F
0330:  GOTO   303
0331:  MOVF   42,W
0332:  MOVWF  00
0333:  INCF   04,F
0334:  MOVF   43,W
0335:  MOVWF  00
0336:  INCF   04,F
0337:  MOVF   44,W
0338:  MOVWF  00
0339:  INCF   04,F
033A:  MOVF   45,W
033B:  MOVWF  00
033C:  BCF    03.5
033D:  RETURN
033E:  MOVF   04,W
033F:  BSF    03.5
0340:  MOVWF  32
0341:  MOVF   31,W
0342:  MOVWF  34
0343:  BTFSC  03.2
0344:  GOTO   360
0345:  MOVF   30,W
0346:  MOVWF  3D
0347:  MOVF   2F,W
0348:  MOVWF  3C
0349:  MOVF   2E,W
034A:  MOVWF  3B
034B:  MOVF   2D,W
034C:  MOVWF  3A
034D:  CLRF   41
034E:  CLRF   40
034F:  MOVLW  20
0350:  MOVWF  3F
0351:  MOVLW  82
0352:  MOVWF  3E
0353:  BCF    03.5
0354:  CALL   1AA
0355:  MOVF   7A,W
0356:  BSF    03.5
0357:  MOVWF  30
0358:  MOVF   79,W
0359:  MOVWF  2F
035A:  MOVF   78,W
035B:  MOVWF  2E
035C:  MOVF   77,W
035D:  MOVWF  2D
035E:  DECFSZ 34,F
035F:  GOTO   345
0360:  MOVF   30,W
0361:  MOVWF  3D
0362:  MOVF   2F,W
0363:  MOVWF  3C
0364:  MOVF   2E,W
0365:  MOVWF  3B
0366:  MOVF   2D,W
0367:  MOVWF  3A
0368:  MOVF   3A,W
0369:  SUBLW  B6
036A:  MOVWF  3A
036B:  CLRF   7A
036C:  MOVF   3B,W
036D:  MOVWF  3E
036E:  BSF    3B.7
036F:  BCF    03.0
0370:  RRF    3B,F
0371:  RRF    3C,F
0372:  RRF    3D,F
0373:  RRF    7A,F
0374:  RRF    79,F
0375:  RRF    78,F
0376:  RRF    77,F
0377:  DECFSZ 3A,F
0378:  GOTO   36F
0379:  BTFSS  3E.7
037A:  GOTO   386
037B:  COMF   77,F
037C:  COMF   78,F
037D:  COMF   79,F
037E:  COMF   7A,F
037F:  INCF   77,F
0380:  BTFSC  03.2
0381:  INCF   78,F
0382:  BTFSC  03.2
0383:  INCF   79,F
0384:  BTFSC  03.2
0385:  INCF   7A,F
0386:  MOVF   7A,W
0387:  MOVWF  30
0388:  MOVF   79,W
0389:  MOVWF  2F
038A:  MOVF   78,W
038B:  MOVWF  2E
038C:  MOVF   77,W
038D:  MOVWF  2D
038E:  BTFSS  30.7
038F:  GOTO   39D
0390:  DECF   32,F
0391:  BSF    32.5
0392:  COMF   2D,F
0393:  COMF   2E,F
0394:  COMF   2F,F
0395:  COMF   30,F
0396:  INCF   2D,F
0397:  BTFSC  03.2
0398:  INCF   2E,F
0399:  BTFSC  03.2
039A:  INCF   2F,F
039B:  BTFSC  03.2
039C:  INCF   30,F
039D:  MOVLW  3B
039E:  MOVWF  39
039F:  MOVLW  9A
03A0:  MOVWF  38
03A1:  MOVLW  CA
03A2:  MOVWF  37
03A3:  CLRF   36
03A4:  MOVLW  0A
03A5:  MOVWF  34
03A6:  MOVF   31,W
03A7:  BTFSC  03.2
03A8:  INCF   32,F
03A9:  BSF    03.1
03AA:  MOVLW  AD
03AB:  MOVWF  04
03AC:  BCF    03.7
03AD:  MOVF   30,W
03AE:  MOVWF  3D
03AF:  MOVF   2F,W
03B0:  MOVWF  3C
03B1:  MOVF   2E,W
03B2:  MOVWF  3B
03B3:  MOVF   2D,W
03B4:  MOVWF  3A
03B5:  MOVF   39,W
03B6:  MOVWF  41
03B7:  MOVF   38,W
03B8:  MOVWF  40
03B9:  MOVF   37,W
03BA:  MOVWF  3F
03BB:  MOVF   36,W
03BC:  MOVWF  3E
03BD:  BCF    03.5
03BE:  CALL   2ED
03BF:  MOVF   78,W
03C0:  MOVF   77,F
03C1:  BTFSS  03.2
03C2:  GOTO   3DA
03C3:  BSF    03.5
03C4:  INCF   31,W
03C5:  SUBWF  34,W
03C6:  BTFSS  03.2
03C7:  GOTO   3CA
03C8:  BCF    03.5
03C9:  GOTO   3DA
03CA:  MOVF   32,W
03CB:  BTFSC  03.2
03CC:  GOTO   3DD
03CD:  ANDLW  0F
03CE:  SUBWF  34,W
03CF:  BTFSC  03.2
03D0:  GOTO   3D3
03D1:  BTFSC  03.0
03D2:  GOTO   415
03D3:  BTFSC  32.7
03D4:  GOTO   415
03D5:  BTFSC  32.6
03D6:  GOTO   3DD
03D7:  MOVLW  20
03D8:  GOTO   40F
03D9:  BCF    03.5
03DA:  MOVLW  20
03DB:  BSF    03.5
03DC:  ANDWF  32,F
03DD:  BTFSS  32.5
03DE:  GOTO   3ED
03DF:  BCF    32.5
03E0:  MOVF   31,W
03E1:  BTFSS  03.2
03E2:  DECF   32,F
03E3:  MOVF   77,W
03E4:  MOVWF  32
03E5:  MOVLW  2D
03E6:  MOVWF  3A
03E7:  BCF    03.5
03E8:  CALL   151
03E9:  BSF    03.5
03EA:  MOVF   32,W
03EB:  MOVWF  77
03EC:  CLRF   32
03ED:  MOVF   31,W
03EE:  SUBWF  34,W
03EF:  BTFSS  03.2
03F0:  GOTO   3FD
03F1:  MOVF   77,W
03F2:  MOVWF  32
03F3:  MOVLW  2E
03F4:  MOVWF  3A
03F5:  BCF    03.5
03F6:  CALL   151
03F7:  BSF    03.5
03F8:  MOVF   32,W
03F9:  MOVWF  77
03FA:  MOVLW  20
03FB:  ANDWF  32,F
03FC:  MOVLW  00
03FD:  MOVLW  30
03FE:  BTFSS  32.5
03FF:  GOTO   40F
0400:  BCF    32.5
0401:  MOVF   31,W
0402:  BTFSS  03.2
0403:  DECF   32,F
0404:  MOVF   77,W
0405:  MOVWF  32
0406:  MOVLW  2D
0407:  MOVWF  3A
0408:  BCF    03.5
0409:  CALL   151
040A:  BSF    03.5
040B:  MOVF   32,W
040C:  MOVWF  77
040D:  CLRF   32
040E:  MOVLW  30
040F:  ADDWF  77,F
0410:  MOVF   77,W
0411:  MOVWF  3A
0412:  BCF    03.5
0413:  CALL   151
0414:  BSF    03.5
0415:  BCF    03.1
0416:  MOVF   39,W
0417:  MOVWF  3D
0418:  MOVF   38,W
0419:  MOVWF  3C
041A:  MOVF   37,W
041B:  MOVWF  3B
041C:  MOVF   36,W
041D:  MOVWF  3A
041E:  CLRF   41
041F:  CLRF   40
0420:  CLRF   3F
0421:  MOVLW  0A
0422:  MOVWF  3E
0423:  BCF    03.5
0424:  CALL   2ED
0425:  MOVF   7A,W
0426:  BSF    03.5
0427:  MOVWF  39
0428:  MOVF   79,W
0429:  MOVWF  38
042A:  MOVF   78,W
042B:  MOVWF  37
042C:  MOVF   77,W
042D:  MOVWF  36
042E:  DECFSZ 34,F
042F:  GOTO   3A9
0430:  BCF    03.5
0431:  BSF    0A.3
0432:  BCF    0A.4
0433:  GOTO   256 (RETURN)
0434:  BSF    03.5
0435:  CLRF   35
0436:  MOVF   04,W
0437:  MOVWF  34
0438:  BCF    35.0
0439:  BTFSC  03.7
043A:  BSF    35.0
043B:  BTFSS  2E.7
043C:  GOTO   445
043D:  BSF    34.7
043E:  BTFSS  34.4
043F:  INCF   34,F
0440:  COMF   2D,F
0441:  COMF   2E,F
0442:  INCF   2D,F
0443:  BTFSC  03.2
0444:  INCF   2E,F
0445:  SWAPF  2E,W
0446:  IORLW  F0
0447:  MOVWF  30
0448:  ADDWF  30,F
0449:  ADDLW  E2
044A:  MOVWF  31
044B:  ADDLW  32
044C:  MOVWF  33
044D:  MOVF   2E,W
044E:  ANDLW  0F
044F:  ADDWF  31,F
0450:  ADDWF  31,F
0451:  ADDWF  33,F
0452:  ADDLW  E9
0453:  MOVWF  32
0454:  ADDWF  32,F
0455:  ADDWF  32,F
0456:  SWAPF  2D,W
0457:  ANDLW  0F
0458:  ADDWF  32,F
0459:  ADDWF  33,F
045A:  RLF    32,F
045B:  RLF    33,F
045C:  COMF   33,F
045D:  RLF    33,F
045E:  MOVF   2D,W
045F:  ANDLW  0F
0460:  ADDWF  33,F
0461:  RLF    30,F
0462:  MOVLW  07
0463:  MOVWF  2F
0464:  MOVLW  0A
0465:  ADDWF  33,F
0466:  DECF   32,F
0467:  BTFSS  03.0
0468:  GOTO   465
0469:  ADDWF  32,F
046A:  DECF   31,F
046B:  BTFSS  03.0
046C:  GOTO   469
046D:  ADDWF  31,F
046E:  DECF   30,F
046F:  BTFSS  03.0
0470:  GOTO   46D
0471:  ADDWF  30,F
0472:  DECF   2F,F
0473:  BTFSS  03.0
0474:  GOTO   471
0475:  MOVLW  AF
0476:  MOVWF  04
0477:  BCF    03.7
0478:  MOVLW  07
0479:  ANDWF  34,W
047A:  BCF    34.6
047B:  DECF   04,F
047C:  ANDWF  34,W
047D:  BTFSS  03.2
047E:  GOTO   486
047F:  BTFSC  34.4
0480:  INCF   04,F
0481:  BTFSC  34.4
0482:  GOTO   486
0483:  MOVLW  20
0484:  MOVWF  77
0485:  GOTO   4A3
0486:  ADDWF  04,F
0487:  MOVLW  B3
0488:  SUBWF  04,W
0489:  BTFSC  03.2
048A:  BSF    34.6
048B:  MOVF   00,W
048C:  MOVWF  77
048D:  BTFSS  03.2
048E:  GOTO   497
048F:  BTFSC  34.6
0490:  GOTO   497
0491:  BTFSC  34.4
0492:  GOTO   4B3
0493:  BTFSC  34.3
0494:  GOTO   497
0495:  MOVLW  20
0496:  GOTO   4A2
0497:  BTFSS  34.7
0498:  GOTO   49F
0499:  MOVLW  2D
049A:  MOVWF  77
049B:  DECF   04,F
049C:  BCF    34.6
049D:  BCF    34.7
049E:  GOTO   4A3
049F:  BSF    34.3
04A0:  BCF    34.4
04A1:  MOVLW  30
04A2:  ADDWF  77,F
04A3:  CLRF   2E
04A4:  MOVF   04,W
04A5:  MOVWF  2D
04A6:  BCF    2E.0
04A7:  BTFSC  03.7
04A8:  BSF    2E.0
04A9:  MOVF   77,W
04AA:  MOVWF  3A
04AB:  BCF    03.5
04AC:  CALL   151
04AD:  BSF    03.5
04AE:  MOVF   2D,W
04AF:  MOVWF  04
04B0:  BCF    03.7
04B1:  BTFSC  2E.0
04B2:  BSF    03.7
04B3:  INCF   04,F
04B4:  BTFSS  34.6
04B5:  GOTO   487
04B6:  BCF    03.5
04B7:  BSF    0A.3
04B8:  BCF    0A.4
04B9:  GOTO   37C (RETURN)
04BA:  MOVLW  80
04BB:  BTFSS  03.1
04BC:  GOTO   4C0
04BD:  BSF    03.5
04BE:  XORWF  32,F
04BF:  BCF    03.5
04C0:  BSF    03.5
04C1:  CLRF   37
04C2:  CLRF   38
04C3:  MOVF   2E,W
04C4:  MOVWF  36
04C5:  MOVF   32,W
04C6:  XORWF  36,F
04C7:  MOVF   2D,W
04C8:  BTFSC  03.2
04C9:  GOTO   5AE
04CA:  MOVWF  35
04CB:  MOVWF  77
04CC:  MOVF   31,W
04CD:  BTFSC  03.2
04CE:  GOTO   5B7
04CF:  SUBWF  35,F
04D0:  BTFSC  03.2
04D1:  GOTO   553
04D2:  BTFSS  03.0
04D3:  GOTO   511
04D4:  MOVF   32,W
04D5:  MOVWF  3B
04D6:  BSF    3B.7
04D7:  MOVF   33,W
04D8:  MOVWF  3A
04D9:  MOVF   34,W
04DA:  MOVWF  39
04DB:  CLRF   38
04DC:  BCF    03.0
04DD:  RRF    3B,F
04DE:  RRF    3A,F
04DF:  RRF    39,F
04E0:  RRF    38,F
04E1:  DECFSZ 35,F
04E2:  GOTO   4DB
04E3:  BTFSS  36.7
04E4:  GOTO   4E8
04E5:  BSF    37.0
04E6:  GOTO   5CB
04E7:  BCF    37.0
04E8:  BCF    35.0
04E9:  BSF    37.4
04EA:  MOVLW  B0
04EB:  MOVWF  04
04EC:  BCF    03.7
04ED:  GOTO   5E0
04EE:  BCF    37.4
04EF:  BTFSC  36.7
04F0:  GOTO   4FB
04F1:  BTFSS  35.0
04F2:  GOTO   506
04F3:  RRF    3B,F
04F4:  RRF    3A,F
04F5:  RRF    39,F
04F6:  RRF    38,F
04F7:  INCF   77,F
04F8:  BTFSC  03.2
04F9:  GOTO   5C6
04FA:  GOTO   506
04FB:  BTFSC  3B.7
04FC:  GOTO   509
04FD:  BCF    03.0
04FE:  RLF    38,F
04FF:  RLF    39,F
0500:  RLF    3A,F
0501:  RLF    3B,F
0502:  DECF   77,F
0503:  BTFSC  03.2
0504:  GOTO   5C6
0505:  GOTO   4FB
0506:  BSF    37.6
0507:  GOTO   573
0508:  BCF    37.6
0509:  MOVF   2E,W
050A:  MOVWF  36
050B:  BTFSS  36.7
050C:  GOTO   50F
050D:  BSF    3B.7
050E:  GOTO   5BF
050F:  BCF    3B.7
0510:  GOTO   5BF
0511:  MOVF   31,W
0512:  MOVWF  35
0513:  MOVWF  77
0514:  MOVF   2D,W
0515:  SUBWF  35,F
0516:  MOVF   2E,W
0517:  MOVWF  3B
0518:  BSF    3B.7
0519:  MOVF   2F,W
051A:  MOVWF  3A
051B:  MOVF   30,W
051C:  MOVWF  39
051D:  CLRF   38
051E:  BCF    03.0
051F:  RRF    3B,F
0520:  RRF    3A,F
0521:  RRF    39,F
0522:  RRF    38,F
0523:  DECFSZ 35,F
0524:  GOTO   51D
0525:  BTFSS  36.7
0526:  GOTO   52A
0527:  BSF    37.1
0528:  GOTO   5CB
0529:  BCF    37.1
052A:  BCF    35.0
052B:  BSF    37.5
052C:  MOVLW  B4
052D:  MOVWF  04
052E:  BCF    03.7
052F:  GOTO   5E0
0530:  BCF    37.5
0531:  BTFSC  36.7
0532:  GOTO   53D
0533:  BTFSS  35.0
0534:  GOTO   548
0535:  RRF    3B,F
0536:  RRF    3A,F
0537:  RRF    39,F
0538:  RRF    38,F
0539:  INCF   77,F
053A:  BTFSC  03.2
053B:  GOTO   5C6
053C:  GOTO   548
053D:  BTFSC  3B.7
053E:  GOTO   54B
053F:  BCF    03.0
0540:  RLF    38,F
0541:  RLF    39,F
0542:  RLF    3A,F
0543:  RLF    3B,F
0544:  DECF   77,F
0545:  BTFSC  03.2
0546:  GOTO   5C6
0547:  GOTO   53D
0548:  BSF    37.7
0549:  GOTO   573
054A:  BCF    37.7
054B:  MOVF   32,W
054C:  MOVWF  36
054D:  BTFSS  36.7
054E:  GOTO   551
054F:  BSF    3B.7
0550:  GOTO   5BF
0551:  BCF    3B.7
0552:  GOTO   5BF
0553:  MOVF   32,W
0554:  MOVWF  3B
0555:  BSF    3B.7
0556:  MOVF   33,W
0557:  MOVWF  3A
0558:  MOVF   34,W
0559:  MOVWF  39
055A:  BTFSS  36.7
055B:  GOTO   560
055C:  BCF    3B.7
055D:  BSF    37.2
055E:  GOTO   5CB
055F:  BCF    37.2
0560:  CLRF   38
0561:  BCF    35.0
0562:  MOVLW  B0
0563:  MOVWF  04
0564:  BCF    03.7
0565:  GOTO   5E0
0566:  BTFSC  36.7
0567:  GOTO   589
0568:  MOVF   2E,W
0569:  MOVWF  36
056A:  BTFSS  35.0
056B:  GOTO   573
056C:  RRF    3B,F
056D:  RRF    3A,F
056E:  RRF    39,F
056F:  RRF    38,F
0570:  INCF   77,F
0571:  BTFSC  03.2
0572:  GOTO   5C6
0573:  BTFSS  38.7
0574:  GOTO   584
0575:  INCF   39,F
0576:  BTFSS  03.2
0577:  GOTO   584
0578:  INCF   3A,F
0579:  BTFSS  03.2
057A:  GOTO   584
057B:  INCF   3B,F
057C:  BTFSS  03.2
057D:  GOTO   584
057E:  RRF    3B,F
057F:  RRF    3A,F
0580:  RRF    39,F
0581:  INCF   77,F
0582:  BTFSC  03.2
0583:  GOTO   5C6
0584:  BTFSC  37.6
0585:  GOTO   508
0586:  BTFSC  37.7
0587:  GOTO   54A
0588:  GOTO   5A8
0589:  MOVLW  80
058A:  XORWF  3B,F
058B:  BTFSS  3B.7
058C:  GOTO   591
058D:  GOTO   5CB
058E:  MOVF   32,W
058F:  MOVWF  36
0590:  GOTO   59E
0591:  MOVF   2E,W
0592:  MOVWF  36
0593:  MOVF   3B,F
0594:  BTFSS  03.2
0595:  GOTO   59E
0596:  MOVF   3A,F
0597:  BTFSS  03.2
0598:  GOTO   59E
0599:  MOVF   39,F
059A:  BTFSS  03.2
059B:  GOTO   59E
059C:  CLRF   77
059D:  GOTO   5BF
059E:  BTFSC  3B.7
059F:  GOTO   5A8
05A0:  BCF    03.0
05A1:  RLF    38,F
05A2:  RLF    39,F
05A3:  RLF    3A,F
05A4:  RLF    3B,F
05A5:  DECFSZ 77,F
05A6:  GOTO   59E
05A7:  GOTO   5C6
05A8:  BTFSS  36.7
05A9:  GOTO   5AC
05AA:  BSF    3B.7
05AB:  GOTO   5BF
05AC:  BCF    3B.7
05AD:  GOTO   5BF
05AE:  MOVF   31,W
05AF:  MOVWF  77
05B0:  MOVF   32,W
05B1:  MOVWF  3B
05B2:  MOVF   33,W
05B3:  MOVWF  3A
05B4:  MOVF   34,W
05B5:  MOVWF  39
05B6:  GOTO   5BF
05B7:  MOVF   2D,W
05B8:  MOVWF  77
05B9:  MOVF   2E,W
05BA:  MOVWF  3B
05BB:  MOVF   2F,W
05BC:  MOVWF  3A
05BD:  MOVF   30,W
05BE:  MOVWF  39
05BF:  MOVF   3B,W
05C0:  MOVWF  78
05C1:  MOVF   3A,W
05C2:  MOVWF  79
05C3:  MOVF   39,W
05C4:  MOVWF  7A
05C5:  GOTO   5FE
05C6:  CLRF   77
05C7:  CLRF   78
05C8:  CLRF   79
05C9:  CLRF   7A
05CA:  GOTO   5FE
05CB:  CLRF   38
05CC:  COMF   39,F
05CD:  COMF   3A,F
05CE:  COMF   3B,F
05CF:  COMF   38,F
05D0:  INCF   38,F
05D1:  BTFSS  03.2
05D2:  GOTO   5D9
05D3:  INCF   39,F
05D4:  BTFSS  03.2
05D5:  GOTO   5D9
05D6:  INCF   3A,F
05D7:  BTFSC  03.2
05D8:  INCF   3B,F
05D9:  BTFSC  37.0
05DA:  GOTO   4E7
05DB:  BTFSC  37.1
05DC:  GOTO   529
05DD:  BTFSC  37.2
05DE:  GOTO   55F
05DF:  GOTO   58E
05E0:  MOVF   00,W
05E1:  ADDWF  39,F
05E2:  BTFSS  03.0
05E3:  GOTO   5EA
05E4:  INCF   3A,F
05E5:  BTFSS  03.2
05E6:  GOTO   5EA
05E7:  INCF   3B,F
05E8:  BTFSC  03.2
05E9:  BSF    35.0
05EA:  DECF   04,F
05EB:  MOVF   00,W
05EC:  ADDWF  3A,F
05ED:  BTFSS  03.0
05EE:  GOTO   5F2
05EF:  INCF   3B,F
05F0:  BTFSC  03.2
05F1:  BSF    35.0
05F2:  DECF   04,F
05F3:  MOVF   00,W
05F4:  BTFSS  00.7
05F5:  XORLW  80
05F6:  ADDWF  3B,F
05F7:  BTFSC  03.0
05F8:  BSF    35.0
05F9:  BTFSC  37.4
05FA:  GOTO   4EE
05FB:  BTFSC  37.5
05FC:  GOTO   530
05FD:  GOTO   566
05FE:  BCF    03.5
05FF:  BSF    0A.3
0600:  BCF    0A.4
0601:  GOTO   3A5 (RETURN)
0602:  BSF    03.5
0603:  MOVF   2E,W
0604:  MOVWF  35
0605:  MOVF   32,W
0606:  XORWF  35,F
0607:  BTFSS  35.7
0608:  GOTO   60E
0609:  BCF    03.2
060A:  BCF    03.0
060B:  BTFSC  2E.7
060C:  BSF    03.0
060D:  GOTO   641
060E:  MOVF   2E,W
060F:  MOVWF  35
0610:  MOVF   31,W
0611:  MOVWF  36
0612:  MOVF   2D,W
0613:  SUBWF  36,F
0614:  BTFSC  03.2
0615:  GOTO   61C
0616:  BTFSS  35.7
0617:  GOTO   641
0618:  MOVF   03,W
0619:  XORLW  01
061A:  MOVWF  03
061B:  GOTO   641
061C:  MOVF   32,W
061D:  MOVWF  36
061E:  MOVF   2E,W
061F:  SUBWF  36,F
0620:  BTFSC  03.2
0621:  GOTO   628
0622:  BTFSS  35.7
0623:  GOTO   641
0624:  MOVF   03,W
0625:  XORLW  01
0626:  MOVWF  03
0627:  GOTO   641
0628:  MOVF   33,W
0629:  MOVWF  36
062A:  MOVF   2F,W
062B:  SUBWF  36,F
062C:  BTFSC  03.2
062D:  GOTO   634
062E:  BTFSS  35.7
062F:  GOTO   641
0630:  MOVF   03,W
0631:  XORLW  01
0632:  MOVWF  03
0633:  GOTO   641
0634:  MOVF   34,W
0635:  MOVWF  36
0636:  MOVF   30,W
0637:  SUBWF  36,F
0638:  BTFSC  03.2
0639:  GOTO   640
063A:  BTFSS  35.7
063B:  GOTO   641
063C:  MOVF   03,W
063D:  XORLW  01
063E:  MOVWF  03
063F:  GOTO   641
0640:  BCF    03.0
0641:  BCF    03.5
0642:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
.................... #use delay(crystal=20000000) 
*
0004:  MOVLW  BB
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
....................  
....................  
....................  
.................... //#include "delay.c" 
....................  
.................... #include "def_16f877a.h" 
.................... // register definitions 
....................  
.................... #define W 0 
.................... #define F 1 
....................  
.................... // register files 
.................... #byte INDF          =0x00 
.................... #byte TMR0          =0x01 
.................... #byte PCL           =0x02 
.................... #byte STATUS        =0x03 
.................... #byte FSR           =0x04 
.................... #byte PORTA         =0x05 
.................... #byte PORTB         =0x06 
.................... #byte PORTC         =0x07 
.................... #byte PORTD         =0x08 
.................... #byte PORTE         =0x09 
....................  
.................... #byte EEDATA        =0x10C 
.................... #byte EEADR         =0x10D 
.................... #byte EEDATH        =0x10E 
.................... #byte EEADRH         =0x10F 
.................... #byte ADCON0 	 =0x1F 
.................... #byte ADCON1 	 =0x9F 
.................... #byte ADRESH 	 =0x9F 
.................... #byte ADSESL 	 =0x9F 
....................  
.................... #byte PCLATH        =0x0a 
.................... #byte INTCON        =0x0b 
.................... #byte PIR1 	=0x0c 
.................... #byte PIR2 	=0x0d 
.................... #byte PIE1 	=0x8c 
.................... #byte PIE2 	=0x8d 
....................  
.................... #byte OPTION_REG    =0x81 
.................... #byte TRISA         =0x85 
.................... #byte TRISB         =0x86 
.................... #byte TRISC         =0x87 
.................... #byte TRISD         =0x88 
.................... #byte TRISE         =0x89 
....................  
.................... #byte EECON1        =0x18C 
.................... #byte EECON2        =0x18D 
....................  
.................... //DINH NGHIA BIT 
.................... #bit RA5	=0x05.5 
.................... #bit RA4	=0x05.4 
.................... #bit RA3	=0x05.3 
.................... #bit RA2	=0x05.2 
.................... #bit RA1	=0x05.1 
.................... #bit RA0	=0x05.0 
....................  
.................... #bit RB7	=0x06.7 
.................... #bit RB6	=0x06.6 
.................... #bit RB5	=0x06.5 
.................... #bit RB4	=0x06.4 
.................... #bit RB3	=0x06.3 
.................... #bit RB2	=0x06.2 
.................... #bit RB1	=0x06.1 
.................... #bit RB0	=0x06.0 
....................  
.................... #bit RC7	=0x07.7 
.................... #bit RC6	=0x07.6 
.................... #bit RC5	=0x07.5 
.................... #bit RC4	=0x07.4 
.................... #bit RC3	=0x07.3 
.................... #bit RC2	=0x07.2 
.................... #bit RC1	=0x07.1 
.................... #bit RC0	=0x07.0 
....................  
.................... #bit RD7	=0x08.7 
.................... #bit RD6	=0x08.6 
.................... #bit RD5	=0x08.5 
.................... #bit RD4	=0x08.4 
.................... #bit RD3	=0x08.3 
.................... #bit RD2	=0x08.2 
.................... #bit RD1	=0x08.1 
.................... #bit RD0	=0x08.0 
....................  
.................... #bit RE2	=0x09.2 
.................... #bit RE1	=0x09.1 
.................... #bit RE0	=0x09.0 
....................  
....................  
.................... #bit TRISA5	=0x85.5 
.................... #bit TRISA4	=0x85.4 
.................... #bit TRISA3	=0x85.3 
.................... #bit TRISA2	=0x85.2 
.................... #bit TRISA1	=0x85.1 
.................... #bit TRISA0	=0x85.0 
....................  
.................... #bit TRISB7	=0x86.7 
.................... #bit TRISB6	=0x86.6 
.................... #bit TRISB5	=0x86.5 
.................... #bit TRISB4	=0x86.4 
.................... #bit TRISB3	=0x86.3 
.................... #bit TRISB2	=0x86.2 
.................... #bit TRISB1	=0x86.1 
.................... #bit TRISB0	=0x86.0 
....................  
.................... #bit TRISC7	=0x87.7 
.................... #bit TRISC6	=0x87.6 
.................... #bit TRISC5	=0x87.5 
.................... #bit TRISC4	=0x87.4 
.................... #bit TRISC3	=0x87.3 
.................... #bit TRISC2	=0x87.2 
.................... #bit TRISC1	=0x87.1 
.................... #bit TRISC0	=0x87.0 
....................  
.................... #bit TRISD7	=0x88.7 
.................... #bit TRISD6	=0x88.6 
.................... #bit TRISD5	=0x88.5 
.................... #bit TRISD4	=0x88.4 
.................... #bit TRISD3	=0x88.3 
.................... #bit TRISD2	=0x88.2 
.................... #bit TRISD1	=0x88.1 
.................... #bit TRISD0	=0x88.0 
....................  
.................... #bit TRISE2	=0x89.2 
.................... #bit TRISE1	=0x89.1 
.................... #bit TRISE0	=0x89.0 
....................  
.................... // INTCON Bits for C 
.................... #bit gie 	= 0x0b.7 
.................... #bit peie = 0x0b.6 
.................... #bit tmr0ie = 0x0b.5 
.................... #bit int0ie = 0x0b.4 
.................... #bit rbie	= 0x0b.3 
.................... #bit tmr0if    = 0x0b.2 
.................... #bit int0if    = 0x0b.1 
.................... #bit rbif    = 0x0b.0 
....................  
.................... // PIR1 for C 
.................... #bit pspif  = 0x0c.7 
.................... #bit adif    = 0x0c.6 
.................... #bit rcif    = 0x0c.5 
.................... #bit txif    = 0x0c.4 
.................... #bit sspif    = 0x0c.3 
.................... #bit ccp1if    = 0x0c.2 
.................... #bit tmr2if    = 0x0c.1 
.................... #bit tmr1if    = 0x0c.0 
....................  
.................... //PIR2 for C 
.................... #bit cmif    = 0x0d.6 
.................... #bit eeif    = 0x0d.4 
.................... #bit bclif  = 0x0d.3 
.................... #bit ccp2if    = 0x0d.0 
....................  
.................... // PIE1 for C 
.................... #bit adie    = 0x8c.6 
.................... #bit rcie    = 0x8c.5 
.................... #bit txie    = 0x8c.4 
.................... #bit sspie    = 0x8c.3 
.................... #bit ccp1ie    = 0x8c.2 
.................... #bit tmr2ie    = 0x8c.1 
.................... #bit tmr1ie    = 0x8c.0 
....................  
.................... //PIE2 for C 
.................... #bit osfie    = 0x8d.7 
.................... #bit cmie    = 0x8d.6 
.................... #bit eeie	= 0x8d.4 
....................  
.................... // OPTION Bits 
.................... #bit not_rbpu	= 0x81.7 
.................... #bit intedg     = 0x81.6 
.................... #bit t0cs       = 0x81.5 
.................... #bit t0se       = 0x81.4 
.................... #bit psa        = 0x81.3 
.................... #bit ps2        = 0x81.2 
.................... #bit ps1        = 0x81.1 
.................... #bit ps0        = 0x81.0 
....................  
.................... // EECON1 Bits 
.................... #bit eepgd	= 0x18c.7 
.................... #bit free   	= 0x18C.4 
.................... #bit wrerr  	= 0x18C.3 
.................... #bit wren    	= 0x18C.2 
.................... #bit wr      	= 0x18C.1 
.................... #bit rd      	= 0x18C.0 
....................  
.................... //ADCON0 
.................... #bit CHS0 	=0x1F.3 
.................... #bit CHS1 	=0x1F.4 
.................... #bit CHS2 	=0x1F.5 
....................  
.................... #FUSES NOWDT, HS, NOPUT, NOPROTECT, NODEBUG, NOBROWNOUT,NOLVP, NOCPD, NOWRT 
....................  
.................... #define LCD_ENABLE_PIN  PIN_D3                                    //// 
.................... #define LCD_RS_PIN      PIN_D1                                    //// 
.................... #define LCD_RW_PIN      PIN_D2                                    //// 
.................... #define LCD_DATA4       PIN_D4                                    //// 
.................... #define LCD_DATA5       PIN_D5                                    //// 
.................... #define LCD_DATA6       PIN_D6                                    //// 
.................... #define LCD_DATA7       PIN_D7   
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
008D:  BSF    08.4
....................    output_float(LCD_DATA5); 
008E:  BSF    08.5
....................    output_float(LCD_DATA6); 
008F:  BSF    08.6
....................    output_float(LCD_DATA7); 
0090:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0091:  BCF    03.5
0092:  BSF    08.2
0093:  BSF    03.5
0094:  BCF    08.2
....................    delay_cycles(1); 
0095:  NOP
....................    lcd_output_enable(1); 
0096:  BCF    03.5
0097:  BSF    08.3
0098:  BSF    03.5
0099:  BCF    08.3
....................    delay_cycles(1); 
009A:  NOP
....................    high = lcd_read_nibble(); 
009B:  BCF    03.5
009C:  CALL   052
009D:  MOVF   78,W
009E:  BSF    03.5
009F:  MOVWF  42
....................        
....................    lcd_output_enable(0); 
00A0:  BCF    03.5
00A1:  BCF    08.3
00A2:  BSF    03.5
00A3:  BCF    08.3
....................    delay_cycles(1); 
00A4:  NOP
....................    lcd_output_enable(1); 
00A5:  BCF    03.5
00A6:  BSF    08.3
00A7:  BSF    03.5
00A8:  BCF    08.3
....................    delay_us(1); 
00A9:  GOTO   0AA
00AA:  GOTO   0AB
00AB:  NOP
....................    low = lcd_read_nibble(); 
00AC:  BCF    03.5
00AD:  CALL   052
00AE:  MOVF   78,W
00AF:  BSF    03.5
00B0:  MOVWF  41
....................        
....................    lcd_output_enable(0); 
00B1:  BCF    03.5
00B2:  BCF    08.3
00B3:  BSF    03.5
00B4:  BCF    08.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00B5:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00B6:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00B7:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00B8:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00B9:  SWAPF  42,W
00BA:  MOVWF  77
00BB:  MOVLW  F0
00BC:  ANDWF  77,F
00BD:  MOVF   77,W
00BE:  IORWF  41,W
00BF:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0052:  BSF    03.5
0053:  CLRF   43
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0054:  BSF    08.4
0055:  MOVLW  00
0056:  BCF    03.5
0057:  BTFSC  08.4
0058:  MOVLW  01
0059:  BSF    03.5
005A:  IORWF  43,F
....................    n |= input(LCD_DATA5) << 1; 
005B:  BSF    08.5
005C:  MOVLW  00
005D:  BCF    03.5
005E:  BTFSC  08.5
005F:  MOVLW  01
0060:  MOVWF  77
0061:  BCF    03.0
0062:  RLF    77,F
0063:  MOVF   77,W
0064:  BSF    03.5
0065:  IORWF  43,F
....................    n |= input(LCD_DATA6) << 2; 
0066:  BSF    08.6
0067:  MOVLW  00
0068:  BCF    03.5
0069:  BTFSC  08.6
006A:  MOVLW  01
006B:  MOVWF  77
006C:  RLF    77,F
006D:  RLF    77,F
006E:  MOVLW  FC
006F:  ANDWF  77,F
0070:  MOVF   77,W
0071:  BSF    03.5
0072:  IORWF  43,F
....................    n |= input(LCD_DATA7) << 3; 
0073:  BSF    08.7
0074:  MOVLW  00
0075:  BCF    03.5
0076:  BTFSC  08.7
0077:  MOVLW  01
0078:  MOVWF  77
0079:  RLF    77,F
007A:  RLF    77,F
007B:  RLF    77,F
007C:  MOVLW  F8
007D:  ANDWF  77,F
007E:  MOVF   77,W
007F:  BSF    03.5
0080:  IORWF  43,F
....................     
....................    return(n); 
0081:  MOVF   43,W
0082:  MOVWF  78
....................   #else 
0083:  BCF    03.5
0084:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0018:  BSF    03.5
0019:  BTFSC  42.0
001A:  GOTO   01F
001B:  BCF    03.5
001C:  BCF    08.4
001D:  GOTO   021
001E:  BSF    03.5
001F:  BCF    03.5
0020:  BSF    08.4
0021:  BSF    03.5
0022:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0023:  BTFSC  42.1
0024:  GOTO   029
0025:  BCF    03.5
0026:  BCF    08.5
0027:  GOTO   02B
0028:  BSF    03.5
0029:  BCF    03.5
002A:  BSF    08.5
002B:  BSF    03.5
002C:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
002D:  BTFSC  42.2
002E:  GOTO   033
002F:  BCF    03.5
0030:  BCF    08.6
0031:  GOTO   035
0032:  BSF    03.5
0033:  BCF    03.5
0034:  BSF    08.6
0035:  BSF    03.5
0036:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0037:  BTFSC  42.3
0038:  GOTO   03D
0039:  BCF    03.5
003A:  BCF    08.7
003B:  GOTO   03F
003C:  BSF    03.5
003D:  BCF    03.5
003E:  BSF    08.7
003F:  BSF    03.5
0040:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0041:  NOP
....................    lcd_output_enable(1); 
0042:  BCF    03.5
0043:  BSF    08.3
0044:  BSF    03.5
0045:  BCF    08.3
....................    delay_us(2); 
0046:  MOVLW  02
0047:  MOVWF  77
0048:  DECFSZ 77,F
0049:  GOTO   048
004A:  GOTO   04B
004B:  NOP
....................    lcd_output_enable(0); 
004C:  BCF    03.5
004D:  BCF    08.3
004E:  BSF    03.5
004F:  BCF    08.3
0050:  BCF    03.5
0051:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0085:  BSF    03.5
0086:  BCF    08.3
....................    lcd_rs_tris(); 
0087:  BCF    08.1
....................    lcd_rw_tris(); 
0088:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0089:  BCF    03.5
008A:  BCF    08.1
008B:  BSF    03.5
008C:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00C0:  MOVF   78,W
00C1:  MOVWF  41
00C2:  BTFSC  41.7
00C3:  GOTO   08D
....................    lcd_output_rs(address); 
00C4:  MOVF   3F,F
00C5:  BTFSS  03.2
00C6:  GOTO   0CB
00C7:  BCF    03.5
00C8:  BCF    08.1
00C9:  GOTO   0CD
00CA:  BSF    03.5
00CB:  BCF    03.5
00CC:  BSF    08.1
00CD:  BSF    03.5
00CE:  BCF    08.1
....................    delay_cycles(1); 
00CF:  NOP
....................    lcd_output_rw(0); 
00D0:  BCF    03.5
00D1:  BCF    08.2
00D2:  BSF    03.5
00D3:  BCF    08.2
....................    delay_cycles(1); 
00D4:  NOP
....................    lcd_output_enable(0); 
00D5:  BCF    03.5
00D6:  BCF    08.3
00D7:  BSF    03.5
00D8:  BCF    08.3
....................    lcd_send_nibble(n >> 4); 
00D9:  SWAPF  40,W
00DA:  MOVWF  41
00DB:  MOVLW  0F
00DC:  ANDWF  41,F
00DD:  MOVF   41,W
00DE:  MOVWF  42
00DF:  BCF    03.5
00E0:  CALL   018
....................    lcd_send_nibble(n & 0xf); 
00E1:  BSF    03.5
00E2:  MOVF   40,W
00E3:  ANDLW  0F
00E4:  MOVWF  41
00E5:  MOVWF  42
00E6:  BCF    03.5
00E7:  CALL   018
00E8:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00E9:  MOVLW  28
00EA:  BSF    03.5
00EB:  MOVWF  2E
00EC:  MOVLW  0C
00ED:  MOVWF  2F
00EE:  MOVLW  01
00EF:  MOVWF  30
00F0:  MOVLW  06
00F1:  MOVWF  31
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00F2:  BCF    03.5
00F3:  BCF    08.3
00F4:  BSF    03.5
00F5:  BCF    08.3
....................    lcd_output_rs(0); 
00F6:  BCF    03.5
00F7:  BCF    08.1
00F8:  BSF    03.5
00F9:  BCF    08.1
....................    lcd_output_rw(0); 
00FA:  BCF    03.5
00FB:  BCF    08.2
00FC:  BSF    03.5
00FD:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00FE:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00FF:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0100:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0101:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0102:  BCF    08.3
....................    lcd_rs_tris(); 
0103:  BCF    08.1
....................    lcd_rw_tris(); 
0104:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
0105:  MOVLW  0F
0106:  MOVWF  3B
0107:  BCF    03.5
0108:  CALL   004
....................    for(i=1;i<=3;++i) 
0109:  MOVLW  01
010A:  BSF    03.5
010B:  MOVWF  2D
010C:  MOVF   2D,W
010D:  SUBLW  03
010E:  BTFSS  03.0
010F:  GOTO   11C
....................    { 
....................        lcd_send_nibble(3); 
0110:  MOVLW  03
0111:  MOVWF  42
0112:  BCF    03.5
0113:  CALL   018
....................        delay_ms(5); 
0114:  MOVLW  05
0115:  BSF    03.5
0116:  MOVWF  3B
0117:  BCF    03.5
0118:  CALL   004
0119:  BSF    03.5
011A:  INCF   2D,F
011B:  GOTO   10C
....................    } 
....................     
....................    lcd_send_nibble(2); 
011C:  MOVLW  02
011D:  MOVWF  42
011E:  BCF    03.5
011F:  CALL   018
....................    delay_ms(5); 
0120:  MOVLW  05
0121:  BSF    03.5
0122:  MOVWF  3B
0123:  BCF    03.5
0124:  CALL   004
....................    for(i=0;i<=3;++i) 
0125:  BSF    03.5
0126:  CLRF   2D
0127:  MOVF   2D,W
0128:  SUBLW  03
0129:  BTFSS  03.0
012A:  GOTO   139
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
012B:  MOVLW  AE
012C:  ADDWF  2D,W
012D:  MOVWF  04
012E:  BCF    03.7
012F:  MOVF   00,W
0130:  MOVWF  32
0131:  CLRF   3F
0132:  MOVF   32,W
0133:  MOVWF  40
0134:  BCF    03.5
0135:  CALL   085
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0136:  BSF    03.5
0137:  INCF   2D,F
0138:  GOTO   127
0139:  BCF    03.5
013A:  BSF    0A.3
013B:  BCF    0A.4
013C:  GOTO   084 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
013D:  BSF    03.5
013E:  DECFSZ 3C,W
013F:  GOTO   141
0140:  GOTO   144
....................       address=LCD_LINE_TWO; 
0141:  MOVLW  40
0142:  MOVWF  3D
0143:  GOTO   145
....................    else 
....................       address=0; 
0144:  CLRF   3D
....................       
....................    address+=x-1; 
0145:  MOVLW  01
0146:  SUBWF  3B,W
0147:  ADDWF  3D,F
....................    lcd_send_byte(0,0x80|address); 
0148:  MOVF   3D,W
0149:  IORLW  80
014A:  MOVWF  3E
014B:  CLRF   3F
014C:  MOVF   3E,W
014D:  MOVWF  40
014E:  BCF    03.5
014F:  CALL   085
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0150:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0151:  BSF    03.5
0152:  MOVF   3A,W
0153:  XORLW  07
0154:  BCF    03.5
0155:  BTFSC  03.2
0156:  GOTO   161
0157:  XORLW  0B
0158:  BTFSC  03.2
0159:  GOTO   168
015A:  XORLW  06
015B:  BTFSC  03.2
015C:  GOTO   174
015D:  XORLW  02
015E:  BTFSC  03.2
015F:  GOTO   17C
0160:  GOTO   183
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0161:  MOVLW  01
0162:  BSF    03.5
0163:  MOVWF  3B
0164:  MOVWF  3C
0165:  BCF    03.5
0166:  CALL   13D
0167:  GOTO   18A
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0168:  BSF    03.5
0169:  CLRF   3F
016A:  MOVLW  01
016B:  MOVWF  40
016C:  BCF    03.5
016D:  CALL   085
....................                      delay_ms(2); 
016E:  MOVLW  02
016F:  BSF    03.5
0170:  MOVWF  3B
0171:  BCF    03.5
0172:  CALL   004
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0173:  GOTO   18A
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0174:  MOVLW  01
0175:  BSF    03.5
0176:  MOVWF  3B
0177:  MOVLW  02
0178:  MOVWF  3C
0179:  BCF    03.5
017A:  CALL   13D
017B:  GOTO   18A
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
017C:  BSF    03.5
017D:  CLRF   3F
017E:  MOVLW  10
017F:  MOVWF  40
0180:  BCF    03.5
0181:  CALL   085
0182:  GOTO   18A
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0183:  MOVLW  01
0184:  BSF    03.5
0185:  MOVWF  3F
0186:  MOVF   3A,W
0187:  MOVWF  40
0188:  BCF    03.5
0189:  CALL   085
....................      #endif 
....................    } 
018A:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... //  
....................  
.................... // PORTC => 8 BUTTONS 
.................... #define START        RC0 
.................... #define STOP         RC1 
.................... #define SEL          RC2 
.................... #define CHANGE       RC3 
.................... #define INC50        RC4 
.................... #define DEC50        RC5 
.................... #define INC10        RC6 
.................... #define DEC10        RC7 
....................  
.................... // Khai bao Chan Relay: 
.................... #define RELAY_UPPER     PIN_B2 
.................... #define RELAY_BELOW     PIN_B1 
....................  
....................  
.................... //-----------------------------// 
.................... //Khai bao Mode hoat dong: 
.................... char water[] = "NUOC  "; 
*
0823:  MOVLW  4E
0824:  BCF    03.5
0825:  MOVWF  20
0826:  MOVLW  55
0827:  MOVWF  21
0828:  MOVLW  4F
0829:  MOVWF  22
082A:  MOVLW  43
082B:  MOVWF  23
082C:  MOVLW  20
082D:  MOVWF  24
082E:  MOVWF  25
082F:  CLRF   26
.................... char gasoline[] = "XANG  "; 
0830:  MOVLW  58
0831:  MOVWF  27
0832:  MOVLW  41
0833:  MOVWF  28
0834:  MOVLW  4E
0835:  MOVWF  29
0836:  MOVLW  47
0837:  MOVWF  2A
0838:  MOVLW  20
0839:  MOVWF  2B
083A:  MOVWF  2C
083B:  CLRF   2D
.................... char alcohol[] = "RUOU  "; 
083C:  MOVLW  52
083D:  MOVWF  2E
083E:  MOVLW  55
083F:  MOVWF  2F
0840:  MOVLW  4F
0841:  MOVWF  30
0842:  MOVLW  55
0843:  MOVWF  31
0844:  MOVLW  20
0845:  MOVWF  32
0846:  MOVWF  33
0847:  CLRF   34
.................... char milk[] = "SUA   "; 
0848:  MOVLW  53
0849:  MOVWF  35
084A:  MOVLW  55
084B:  MOVWF  36
084C:  MOVLW  41
084D:  MOVWF  37
084E:  MOVLW  20
084F:  MOVWF  38
0850:  MOVWF  39
0851:  MOVWF  3A
0852:  CLRF   3B
.................... char cc_oil[] = "D_AN  "; 
0853:  MOVLW  44
0854:  MOVWF  3C
0855:  MOVLW  5F
0856:  MOVWF  3D
0857:  MOVLW  41
0858:  MOVWF  3E
0859:  MOVLW  4E
085A:  MOVWF  3F
085B:  MOVLW  20
085C:  MOVWF  40
085D:  MOVWF  41
085E:  CLRF   42
.................... //-----------------------------// 
.................... int8 const increasehigh = 10; 
.................... int8 const increaselow = 1; 
.................... int8 const decreasehigh = 10; 
.................... int8 const decreaselow = 1; 
.................... int8 count_mode = 1; 
....................  
.................... float temp = 0; 
.................... float Volume = 0; 
.................... float high = 0; 
.................... float trongluongrieng = 1; 
.................... long setval = 0; //gia tri chieu cao cai dat 
.................... int1 start_stop_check = 0; 
.................... int1 upper_on = 0, below_on = 0; 
....................  
.................... void main() 
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  MOVLW  01
0804:  MOVWF  43
0805:  CLRF   47
0806:  CLRF   46
0807:  CLRF   45
0808:  CLRF   44
0809:  CLRF   4B
080A:  CLRF   4A
080B:  CLRF   49
080C:  CLRF   48
080D:  CLRF   4F
080E:  CLRF   4E
080F:  CLRF   4D
0810:  CLRF   4C
0811:  CLRF   53
0812:  CLRF   52
0813:  CLRF   51
0814:  MOVLW  7F
0815:  MOVWF  50
0816:  CLRF   55
0817:  CLRF   54
0818:  BCF    56.0
0819:  BCF    56.1
081A:  BCF    56.2
081B:  BSF    03.5
081C:  BSF    1F.0
081D:  BSF    1F.1
081E:  BSF    1F.2
081F:  BCF    1F.3
0820:  MOVLW  07
0821:  MOVWF  1C
0822:  BCF    03.7
.................... { 
....................    //hangtram = setval div 100; 
....................     
....................    //VALVE1 = 1; 
....................    TRISC=0xFF; 
*
085F:  MOVLW  FF
0860:  BSF    03.5
0861:  MOVWF  07
....................    output_low (RELAY_UPPER); 
0862:  BCF    06.2
0863:  BCF    03.5
0864:  BCF    06.2
....................    output_low (RELAY_BELOW); 
0865:  BSF    03.5
0866:  BCF    06.1
0867:  BCF    03.5
0868:  BCF    06.1
....................     
....................    setup_adc_ports(0); 
0869:  BSF    03.5
086A:  BCF    1F.0
086B:  BCF    1F.1
086C:  BCF    1F.2
086D:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
086E:  BCF    1F.6
086F:  BCF    03.5
0870:  BCF    1F.6
0871:  BCF    1F.7
0872:  BSF    03.5
0873:  BCF    1F.7
0874:  BCF    03.5
0875:  BSF    1F.0
....................    float adc = 0, voltage = 0, weight = 0; 
0876:  CLRF   5A
0877:  CLRF   59
0878:  CLRF   58
0879:  CLRF   57
087A:  CLRF   5E
087B:  CLRF   5D
087C:  CLRF   5C
087D:  CLRF   5B
087E:  CLRF   62
087F:  CLRF   61
0880:  CLRF   60
0881:  CLRF   5F
....................     
.................... //   hien thi cac dong chu tren lcd 
....................    lcd_init(); 
0882:  BCF    0A.3
0883:  GOTO   0E9
0884:  BSF    0A.3
....................    lcd_gotoxy(11,1); 
0885:  MOVLW  0B
0886:  BSF    03.5
0887:  MOVWF  3B
0888:  MOVLW  01
0889:  MOVWF  3C
088A:  BCF    0A.3
088B:  BCF    03.5
088C:  CALL   13D
088D:  BSF    0A.3
....................    char realheight[] = "Real_H"; 
088E:  MOVLW  52
088F:  MOVWF  63
0890:  MOVLW  65
0891:  MOVWF  64
0892:  MOVLW  61
0893:  MOVWF  65
0894:  MOVLW  6C
0895:  MOVWF  66
0896:  MOVLW  5F
0897:  MOVWF  67
0898:  MOVLW  48
0899:  MOVWF  68
089A:  CLRF   69
....................    for (int i=0; i < 6; i++)  lcd_putc(realheight[i]); 
089B:  CLRF   6A
089C:  MOVF   6A,W
089D:  SUBLW  05
089E:  BTFSS  03.0
089F:  GOTO   0AE
08A0:  MOVLW  63
08A1:  ADDWF  6A,W
08A2:  MOVWF  04
08A3:  BCF    03.7
08A4:  MOVF   00,W
08A5:  BSF    03.5
08A6:  MOVWF  29
08A7:  MOVWF  3A
08A8:  BCF    0A.3
08A9:  BCF    03.5
08AA:  CALL   151
08AB:  BSF    0A.3
08AC:  INCF   6A,F
08AD:  GOTO   09C
....................    lcd_gotoxy(10,1); 
08AE:  MOVLW  0A
08AF:  BSF    03.5
08B0:  MOVWF  3B
08B1:  MOVLW  01
08B2:  MOVWF  3C
08B3:  BCF    0A.3
08B4:  BCF    03.5
08B5:  CALL   13D
08B6:  BSF    0A.3
....................    lcd_putc('|'); 
08B7:  MOVLW  7C
08B8:  BSF    03.5
08B9:  MOVWF  3A
08BA:  BCF    0A.3
08BB:  BCF    03.5
08BC:  CALL   151
08BD:  BSF    0A.3
....................    lcd_gotoxy(10,2); 
08BE:  MOVLW  0A
08BF:  BSF    03.5
08C0:  MOVWF  3B
08C1:  MOVLW  02
08C2:  MOVWF  3C
08C3:  BCF    0A.3
08C4:  BCF    03.5
08C5:  CALL   13D
08C6:  BSF    0A.3
....................    lcd_putc('|'); 
08C7:  MOVLW  7C
08C8:  BSF    03.5
08C9:  MOVWF  3A
08CA:  BCF    0A.3
08CB:  BCF    03.5
08CC:  CALL   151
08CD:  BSF    0A.3
....................    lcd_gotoxy(1,1); 
08CE:  MOVLW  01
08CF:  BSF    03.5
08D0:  MOVWF  3B
08D1:  MOVWF  3C
08D2:  BCF    0A.3
08D3:  BCF    03.5
08D4:  CALL   13D
08D5:  BSF    0A.3
....................    char modeselect[] = "M:"; 
08D6:  MOVLW  4D
08D7:  MOVWF  6B
08D8:  MOVLW  3A
08D9:  MOVWF  6C
08DA:  CLRF   6D
....................    for (int j=0; j < 2; j++)  lcd_putc(modeselect[j]); 
08DB:  CLRF   6E
08DC:  MOVF   6E,W
08DD:  SUBLW  01
08DE:  BTFSS  03.0
08DF:  GOTO   0EE
08E0:  MOVLW  6B
08E1:  ADDWF  6E,W
08E2:  MOVWF  04
08E3:  BCF    03.7
08E4:  MOVF   00,W
08E5:  BSF    03.5
08E6:  MOVWF  29
08E7:  MOVWF  3A
08E8:  BCF    0A.3
08E9:  BCF    03.5
08EA:  CALL   151
08EB:  BSF    0A.3
08EC:  INCF   6E,F
08ED:  GOTO   0DC
....................    char height[] = "H_SET:"; 
08EE:  MOVLW  48
08EF:  MOVWF  6F
08F0:  MOVLW  5F
08F1:  MOVWF  70
08F2:  MOVLW  53
08F3:  MOVWF  71
08F4:  MOVLW  45
08F5:  MOVWF  72
08F6:  MOVLW  54
08F7:  MOVWF  73
08F8:  MOVLW  3A
08F9:  MOVWF  74
08FA:  CLRF   75
....................    lcd_gotoxy(1,2); 
08FB:  MOVLW  01
08FC:  BSF    03.5
08FD:  MOVWF  3B
08FE:  MOVLW  02
08FF:  MOVWF  3C
0900:  BCF    0A.3
0901:  BCF    03.5
0902:  CALL   13D
0903:  BSF    0A.3
....................    for (int k=0; k < 6; k++)  lcd_putc(height[k]); 
0904:  CLRF   76
0905:  MOVF   76,W
0906:  SUBLW  05
0907:  BTFSS  03.0
0908:  GOTO   117
0909:  MOVLW  6F
090A:  ADDWF  76,W
090B:  MOVWF  04
090C:  BCF    03.7
090D:  MOVF   00,W
090E:  BSF    03.5
090F:  MOVWF  29
0910:  MOVWF  3A
0911:  BCF    0A.3
0912:  BCF    03.5
0913:  CALL   151
0914:  BSF    0A.3
0915:  INCF   76,F
0916:  GOTO   105
....................        
.................... // mac dinh la nuoc, trong luong rieng = 1  
....................    char mode[]="NUOC  "; 
0917:  MOVLW  4E
0918:  BSF    03.5
0919:  MOVWF  20
091A:  MOVLW  55
091B:  MOVWF  21
091C:  MOVLW  4F
091D:  MOVWF  22
091E:  MOVLW  43
091F:  MOVWF  23
0920:  MOVLW  20
0921:  MOVWF  24
0922:  MOVWF  25
0923:  CLRF   26
....................    lcd_gotoxy(3,1); 
0924:  MOVLW  03
0925:  MOVWF  3B
0926:  MOVLW  01
0927:  MOVWF  3C
0928:  BCF    0A.3
0929:  BCF    03.5
092A:  CALL   13D
092B:  BSF    0A.3
....................    for (int m=0; m < 6; m++)  lcd_putc(mode[m]); 
092C:  CLRF   7B
092D:  MOVF   7B,W
092E:  SUBLW  05
092F:  BTFSS  03.0
0930:  GOTO   13F
0931:  MOVLW  A0
0932:  ADDWF  7B,W
0933:  MOVWF  04
0934:  BCF    03.7
0935:  MOVF   00,W
0936:  BSF    03.5
0937:  MOVWF  29
0938:  MOVWF  3A
0939:  BCF    0A.3
093A:  BCF    03.5
093B:  CALL   151
093C:  BSF    0A.3
093D:  INCF   7B,F
093E:  GOTO   12D
.................... // 
....................  
....................    while(TRUE) 
....................    { 
....................       //Doc ADC va tinh chieu cao muc nuoc: 
....................       adc = read_adc(); 
093F:  BSF    1F.2
0940:  BTFSC  1F.2
0941:  GOTO   140
0942:  MOVF   1E,W
0943:  MOVWF  7A
0944:  BSF    03.5
0945:  MOVF   1E,W
0946:  MOVWF  2D
0947:  MOVF   7A,W
0948:  MOVWF  2E
0949:  BCF    0A.3
094A:  BCF    03.5
094B:  CALL   18B
094C:  BSF    0A.3
094D:  MOVF   7A,W
094E:  MOVWF  5A
094F:  MOVF   79,W
0950:  MOVWF  59
0951:  MOVF   78,W
0952:  MOVWF  58
0953:  MOVF   77,W
0954:  MOVWF  57
....................       voltage = adc*5/65535; 
0955:  MOVF   5A,W
0956:  BSF    03.5
0957:  MOVWF  3D
0958:  BCF    03.5
0959:  MOVF   59,W
095A:  BSF    03.5
095B:  MOVWF  3C
095C:  BCF    03.5
095D:  MOVF   58,W
095E:  BSF    03.5
095F:  MOVWF  3B
0960:  BCF    03.5
0961:  MOVF   57,W
0962:  BSF    03.5
0963:  MOVWF  3A
0964:  CLRF   41
0965:  CLRF   40
0966:  MOVLW  20
0967:  MOVWF  3F
0968:  MOVLW  81
0969:  MOVWF  3E
096A:  BCF    0A.3
096B:  BCF    03.5
096C:  CALL   1AA
096D:  BSF    0A.3
096E:  MOVF   7A,W
096F:  BSF    03.5
0970:  MOVWF  2C
0971:  MOVF   79,W
0972:  MOVWF  2B
0973:  MOVF   78,W
0974:  MOVWF  2A
0975:  MOVF   77,W
0976:  MOVWF  29
0977:  MOVF   2C,W
0978:  MOVWF  34
0979:  MOVF   2B,W
097A:  MOVWF  33
097B:  MOVF   2A,W
097C:  MOVWF  32
097D:  MOVF   29,W
097E:  MOVWF  31
097F:  CLRF   38
0980:  MOVLW  FF
0981:  MOVWF  37
0982:  MOVLW  7F
0983:  MOVWF  36
0984:  MOVLW  8E
0985:  MOVWF  35
0986:  BCF    0A.3
0987:  BCF    03.5
0988:  CALL   221
0989:  BSF    0A.3
098A:  MOVF   7A,W
098B:  MOVWF  5E
098C:  MOVF   79,W
098D:  MOVWF  5D
098E:  MOVF   78,W
098F:  MOVWF  5C
0990:  MOVF   77,W
0991:  MOVWF  5B
....................       weight = adc * 3500/65535; 
0992:  MOVF   5A,W
0993:  BSF    03.5
0994:  MOVWF  3D
0995:  BCF    03.5
0996:  MOVF   59,W
0997:  BSF    03.5
0998:  MOVWF  3C
0999:  BCF    03.5
099A:  MOVF   58,W
099B:  BSF    03.5
099C:  MOVWF  3B
099D:  BCF    03.5
099E:  MOVF   57,W
099F:  BSF    03.5
09A0:  MOVWF  3A
09A1:  CLRF   41
09A2:  MOVLW  C0
09A3:  MOVWF  40
09A4:  MOVLW  5A
09A5:  MOVWF  3F
09A6:  MOVLW  8A
09A7:  MOVWF  3E
09A8:  BCF    0A.3
09A9:  BCF    03.5
09AA:  CALL   1AA
09AB:  BSF    0A.3
09AC:  MOVF   7A,W
09AD:  BSF    03.5
09AE:  MOVWF  2C
09AF:  MOVF   79,W
09B0:  MOVWF  2B
09B1:  MOVF   78,W
09B2:  MOVWF  2A
09B3:  MOVF   77,W
09B4:  MOVWF  29
09B5:  MOVF   2C,W
09B6:  MOVWF  34
09B7:  MOVF   2B,W
09B8:  MOVWF  33
09B9:  MOVF   2A,W
09BA:  MOVWF  32
09BB:  MOVF   29,W
09BC:  MOVWF  31
09BD:  CLRF   38
09BE:  MOVLW  FF
09BF:  MOVWF  37
09C0:  MOVLW  7F
09C1:  MOVWF  36
09C2:  MOVLW  8E
09C3:  MOVWF  35
09C4:  BCF    0A.3
09C5:  BCF    03.5
09C6:  CALL   221
09C7:  BSF    0A.3
09C8:  MOVF   7A,W
09C9:  MOVWF  62
09CA:  MOVF   79,W
09CB:  MOVWF  61
09CC:  MOVF   78,W
09CD:  MOVWF  60
09CE:  MOVF   77,W
09CF:  MOVWF  5F
....................       Volume = weight / trongluongrieng; 
09D0:  MOVF   62,W
09D1:  BSF    03.5
09D2:  MOVWF  34
09D3:  BCF    03.5
09D4:  MOVF   61,W
09D5:  BSF    03.5
09D6:  MOVWF  33
09D7:  BCF    03.5
09D8:  MOVF   60,W
09D9:  BSF    03.5
09DA:  MOVWF  32
09DB:  BCF    03.5
09DC:  MOVF   5F,W
09DD:  BSF    03.5
09DE:  MOVWF  31
09DF:  BCF    03.5
09E0:  MOVF   53,W
09E1:  BSF    03.5
09E2:  MOVWF  38
09E3:  BCF    03.5
09E4:  MOVF   52,W
09E5:  BSF    03.5
09E6:  MOVWF  37
09E7:  BCF    03.5
09E8:  MOVF   51,W
09E9:  BSF    03.5
09EA:  MOVWF  36
09EB:  BCF    03.5
09EC:  MOVF   50,W
09ED:  BSF    03.5
09EE:  MOVWF  35
09EF:  BCF    0A.3
09F0:  BCF    03.5
09F1:  CALL   221
09F2:  BSF    0A.3
09F3:  MOVF   7A,W
09F4:  MOVWF  4B
09F5:  MOVF   79,W
09F6:  MOVWF  4A
09F7:  MOVF   78,W
09F8:  MOVWF  49
09F9:  MOVF   77,W
09FA:  MOVWF  48
....................       high = weight /(trongluongrieng*10); 
09FB:  MOVF   53,W
09FC:  BSF    03.5
09FD:  MOVWF  3D
09FE:  BCF    03.5
09FF:  MOVF   52,W
0A00:  BSF    03.5
0A01:  MOVWF  3C
0A02:  BCF    03.5
0A03:  MOVF   51,W
0A04:  BSF    03.5
0A05:  MOVWF  3B
0A06:  BCF    03.5
0A07:  MOVF   50,W
0A08:  BSF    03.5
0A09:  MOVWF  3A
0A0A:  CLRF   41
0A0B:  CLRF   40
0A0C:  MOVLW  20
0A0D:  MOVWF  3F
0A0E:  MOVLW  82
0A0F:  MOVWF  3E
0A10:  BCF    0A.3
0A11:  BCF    03.5
0A12:  CALL   1AA
0A13:  BSF    0A.3
0A14:  MOVF   62,W
0A15:  BSF    03.5
0A16:  MOVWF  34
0A17:  BCF    03.5
0A18:  MOVF   61,W
0A19:  BSF    03.5
0A1A:  MOVWF  33
0A1B:  BCF    03.5
0A1C:  MOVF   60,W
0A1D:  BSF    03.5
0A1E:  MOVWF  32
0A1F:  BCF    03.5
0A20:  MOVF   5F,W
0A21:  BSF    03.5
0A22:  MOVWF  31
0A23:  MOVF   7A,W
0A24:  MOVWF  38
0A25:  MOVF   79,W
0A26:  MOVWF  37
0A27:  MOVF   78,W
0A28:  MOVWF  36
0A29:  MOVF   77,W
0A2A:  MOVWF  35
0A2B:  BCF    0A.3
0A2C:  BCF    03.5
0A2D:  CALL   221
0A2E:  BSF    0A.3
0A2F:  MOVF   7A,W
0A30:  MOVWF  4F
0A31:  MOVF   79,W
0A32:  MOVWF  4E
0A33:  MOVF   78,W
0A34:  MOVWF  4D
0A35:  MOVF   77,W
0A36:  MOVWF  4C
....................  
....................       lcd_gotoxy (11,2); 
0A37:  MOVLW  0B
0A38:  BSF    03.5
0A39:  MOVWF  3B
0A3A:  MOVLW  02
0A3B:  MOVWF  3C
0A3C:  BCF    0A.3
0A3D:  BCF    03.5
0A3E:  CALL   13D
0A3F:  BSF    0A.3
....................       printf(lcd_putc, "%3.4f", high); 
0A40:  MOVLW  89
0A41:  MOVWF  04
0A42:  MOVF   4F,W
0A43:  BSF    03.5
0A44:  MOVWF  30
0A45:  BCF    03.5
0A46:  MOVF   4E,W
0A47:  BSF    03.5
0A48:  MOVWF  2F
0A49:  BCF    03.5
0A4A:  MOVF   4D,W
0A4B:  BSF    03.5
0A4C:  MOVWF  2E
0A4D:  BCF    03.5
0A4E:  MOVF   4C,W
0A4F:  BSF    03.5
0A50:  MOVWF  2D
0A51:  MOVLW  04
0A52:  MOVWF  31
0A53:  BCF    0A.3
0A54:  BCF    03.5
0A55:  GOTO   33E
0A56:  BSF    0A.3
....................        
....................       //Nhan nut Start: 
....................       if (START == 0)   start_stop_check = 1; 
0A57:  BTFSC  07.0
0A58:  GOTO   25B
0A59:  BSF    56.0
0A5A:  GOTO   266
....................        
....................       //Nhan nut STOP:      
....................       else if (STOP == 0) { 
0A5B:  BTFSC  07.1
0A5C:  GOTO   266
....................          output_low (RELAY_BELOW); 
0A5D:  BSF    03.5
0A5E:  BCF    06.1
0A5F:  BCF    03.5
0A60:  BCF    06.1
....................          output_low (RELAY_UPPER); 
0A61:  BSF    03.5
0A62:  BCF    06.2
0A63:  BCF    03.5
0A64:  BCF    06.2
....................          start_stop_check = 0; 
0A65:  BCF    56.0
....................       } 
....................       //Stop == 0; Start == 1; 
....................       if (start_stop_check == 0) { 
0A66:  BTFSC  56.0
0A67:  GOTO   3B6
....................            
....................           //Nhan nut CHANGE: 
....................           if (CHANGE == 0) { 
0A68:  BTFSC  07.3
0A69:  GOTO   2F2
....................              if (count_mode == 5)   count_mode = 1; 
0A6A:  MOVF   43,W
0A6B:  SUBLW  05
0A6C:  BTFSS  03.2
0A6D:  GOTO   271
0A6E:  MOVLW  01
0A6F:  MOVWF  43
0A70:  GOTO   273
....................              else count_mode += 1; 
0A71:  MOVLW  01
0A72:  ADDWF  43,F
....................               
....................              //Hien thi Mode: 
....................              lcd_gotoxy(3,1); 
0A73:  MOVLW  03
0A74:  BSF    03.5
0A75:  MOVWF  3B
0A76:  MOVLW  01
0A77:  MOVWF  3C
0A78:  BCF    0A.3
0A79:  BCF    03.5
0A7A:  CALL   13D
0A7B:  BSF    0A.3
....................              if (count_mode == 1)      {for (int i=0; i < 6; i++)  lcd_putc(water[i]);} 
0A7C:  DECFSZ 43,W
0A7D:  GOTO   292
0A7E:  CLRF   7C
0A7F:  MOVF   7C,W
0A80:  SUBLW  05
0A81:  BTFSS  03.0
0A82:  GOTO   291
0A83:  MOVLW  20
0A84:  ADDWF  7C,W
0A85:  MOVWF  04
0A86:  BCF    03.7
0A87:  MOVF   00,W
0A88:  BSF    03.5
0A89:  MOVWF  29
0A8A:  MOVWF  3A
0A8B:  BCF    0A.3
0A8C:  BCF    03.5
0A8D:  CALL   151
0A8E:  BSF    0A.3
0A8F:  INCF   7C,F
0A90:  GOTO   27F
0A91:  GOTO   2F1
....................              else if (count_mode == 2) {for (int i=0; i < 6; i++)  lcd_putc(gasoline[i]);} 
0A92:  MOVF   43,W
0A93:  SUBLW  02
0A94:  BTFSS  03.2
0A95:  GOTO   2AA
0A96:  CLRF   7D
0A97:  MOVF   7D,W
0A98:  SUBLW  05
0A99:  BTFSS  03.0
0A9A:  GOTO   2A9
0A9B:  MOVLW  27
0A9C:  ADDWF  7D,W
0A9D:  MOVWF  04
0A9E:  BCF    03.7
0A9F:  MOVF   00,W
0AA0:  BSF    03.5
0AA1:  MOVWF  29
0AA2:  MOVWF  3A
0AA3:  BCF    0A.3
0AA4:  BCF    03.5
0AA5:  CALL   151
0AA6:  BSF    0A.3
0AA7:  INCF   7D,F
0AA8:  GOTO   297
0AA9:  GOTO   2F1
....................              else if (count_mode == 3) {for (int i=0; i < 6; i++)  lcd_putc(alcohol[i]);} 
0AAA:  MOVF   43,W
0AAB:  SUBLW  03
0AAC:  BTFSS  03.2
0AAD:  GOTO   2C2
0AAE:  CLRF   7E
0AAF:  MOVF   7E,W
0AB0:  SUBLW  05
0AB1:  BTFSS  03.0
0AB2:  GOTO   2C1
0AB3:  MOVLW  2E
0AB4:  ADDWF  7E,W
0AB5:  MOVWF  04
0AB6:  BCF    03.7
0AB7:  MOVF   00,W
0AB8:  BSF    03.5
0AB9:  MOVWF  29
0ABA:  MOVWF  3A
0ABB:  BCF    0A.3
0ABC:  BCF    03.5
0ABD:  CALL   151
0ABE:  BSF    0A.3
0ABF:  INCF   7E,F
0AC0:  GOTO   2AF
0AC1:  GOTO   2F1
....................              else if (count_mode == 4) {for (int i=0; i < 6; i++)  lcd_putc(milk[i]);} 
0AC2:  MOVF   43,W
0AC3:  SUBLW  04
0AC4:  BTFSS  03.2
0AC5:  GOTO   2DC
0AC6:  BSF    03.5
0AC7:  CLRF   27
0AC8:  MOVF   27,W
0AC9:  SUBLW  05
0ACA:  BTFSS  03.0
0ACB:  GOTO   2DA
0ACC:  MOVLW  35
0ACD:  ADDWF  27,W
0ACE:  MOVWF  04
0ACF:  BCF    03.7
0AD0:  MOVF   00,W
0AD1:  MOVWF  29
0AD2:  MOVWF  3A
0AD3:  BCF    0A.3
0AD4:  BCF    03.5
0AD5:  CALL   151
0AD6:  BSF    0A.3
0AD7:  BSF    03.5
0AD8:  INCF   27,F
0AD9:  GOTO   2C8
0ADA:  GOTO   2F0
0ADB:  BCF    03.5
....................              else                      {for (int i=0; i < 6; i++)  lcd_putc(cc_oil[i]);} 
0ADC:  BSF    03.5
0ADD:  CLRF   28
0ADE:  MOVF   28,W
0ADF:  SUBLW  05
0AE0:  BTFSS  03.0
0AE1:  GOTO   2F0
0AE2:  MOVLW  3C
0AE3:  ADDWF  28,W
0AE4:  MOVWF  04
0AE5:  BCF    03.7
0AE6:  MOVF   00,W
0AE7:  MOVWF  29
0AE8:  MOVWF  3A
0AE9:  BCF    0A.3
0AEA:  BCF    03.5
0AEB:  CALL   151
0AEC:  BSF    0A.3
0AED:  BSF    03.5
0AEE:  INCF   28,F
0AEF:  GOTO   2DE
0AF0:  BCF    03.5
....................           } 
0AF1:  GOTO   327
....................           //Nhan nut SEL: 
....................           else if (SEL == 0) { 
0AF2:  BTFSC  07.2
0AF3:  GOTO   327
....................              //Chon khoi luong rieng: 
....................              if (count_mode == 1)      trongluongrieng = 1; 
0AF4:  DECFSZ 43,W
0AF5:  GOTO   2FC
0AF6:  CLRF   53
0AF7:  CLRF   52
0AF8:  CLRF   51
0AF9:  MOVLW  7F
0AFA:  MOVWF  50
0AFB:  GOTO   327
....................              else if (count_mode == 2) trongluongrieng = 0.7; 
0AFC:  MOVF   43,W
0AFD:  SUBLW  02
0AFE:  BTFSS  03.2
0AFF:  GOTO   307
0B00:  MOVLW  33
0B01:  MOVWF  53
0B02:  MOVWF  52
0B03:  MOVWF  51
0B04:  MOVLW  7E
0B05:  MOVWF  50
0B06:  GOTO   327
....................              else if (count_mode == 3) trongluongrieng = 0.79; 
0B07:  MOVF   43,W
0B08:  SUBLW  03
0B09:  BTFSS  03.2
0B0A:  GOTO   314
0B0B:  MOVLW  71
0B0C:  MOVWF  53
0B0D:  MOVLW  3D
0B0E:  MOVWF  52
0B0F:  MOVLW  4A
0B10:  MOVWF  51
0B11:  MOVLW  7E
0B12:  MOVWF  50
0B13:  GOTO   327
....................              else if (count_mode == 4) trongluongrieng = 1.03; 
0B14:  MOVF   43,W
0B15:  SUBLW  04
0B16:  BTFSS  03.2
0B17:  GOTO   321
0B18:  MOVLW  0A
0B19:  MOVWF  53
0B1A:  MOVLW  D7
0B1B:  MOVWF  52
0B1C:  MOVLW  03
0B1D:  MOVWF  51
0B1E:  MOVLW  7F
0B1F:  MOVWF  50
0B20:  GOTO   327
....................              else                      trongluongrieng = 0.9; 
0B21:  MOVLW  66
0B22:  MOVWF  53
0B23:  MOVWF  52
0B24:  MOVWF  51
0B25:  MOVLW  7E
0B26:  MOVWF  50
....................           } 
....................            
....................           //Nhan nut chinh chieu cao: 
....................           if      (setval<(301-increasehigh) && INC50 == 0)  setval += increasehigh; 
0B27:  MOVF   55,W
0B28:  SUBLW  01
0B29:  BTFSS  03.0
0B2A:  GOTO   338
0B2B:  BTFSS  03.2
0B2C:  GOTO   331
0B2D:  MOVF   54,W
0B2E:  SUBLW  22
0B2F:  BTFSS  03.0
0B30:  GOTO   338
0B31:  BTFSC  07.4
0B32:  GOTO   338
0B33:  MOVLW  0A
0B34:  ADDWF  54,F
0B35:  BTFSC  03.0
0B36:  INCF   55,F
0B37:  GOTO   367
....................           else if (setval>(decreasehigh-1)   && DEC50 == 0)  setval -= decreasehigh; 
0B38:  MOVF   55,F
0B39:  BTFSS  03.2
0B3A:  GOTO   33F
0B3B:  MOVF   54,W
0B3C:  SUBLW  09
0B3D:  BTFSC  03.0
0B3E:  GOTO   348
0B3F:  BTFSC  07.5
0B40:  GOTO   348
0B41:  MOVLW  0A
0B42:  SUBWF  54,F
0B43:  MOVLW  00
0B44:  BTFSS  03.0
0B45:  MOVLW  01
0B46:  SUBWF  55,F
0B47:  GOTO   367
....................           else if (setval<(301-increaselow)  && INC10 == 0)  setval += increaselow; 
0B48:  MOVF   55,W
0B49:  SUBLW  01
0B4A:  BTFSS  03.0
0B4B:  GOTO   359
0B4C:  BTFSS  03.2
0B4D:  GOTO   352
0B4E:  MOVF   54,W
0B4F:  SUBLW  2B
0B50:  BTFSS  03.0
0B51:  GOTO   359
0B52:  BTFSC  07.6
0B53:  GOTO   359
0B54:  MOVLW  01
0B55:  ADDWF  54,F
0B56:  BTFSC  03.0
0B57:  INCF   55,F
0B58:  GOTO   367
....................           else if (setval>(decreaselow-1)    && DEC10 == 0)  setval -= decreaselow; 
0B59:  MOVF   54,F
0B5A:  BTFSS  03.2
0B5B:  GOTO   35F
0B5C:  MOVF   55,F
0B5D:  BTFSC  03.2
0B5E:  GOTO   367
0B5F:  BTFSC  07.7
0B60:  GOTO   367
0B61:  MOVLW  01
0B62:  SUBWF  54,F
0B63:  MOVLW  00
0B64:  BTFSS  03.0
0B65:  MOVLW  01
0B66:  SUBWF  55,F
....................            
....................  
....................           //Hien thi gia tri cai dat len lcd: 
....................           lcd_gotoxy (7,2); 
0B67:  MOVLW  07
0B68:  BSF    03.5
0B69:  MOVWF  3B
0B6A:  MOVLW  02
0B6B:  MOVWF  3C
0B6C:  BCF    0A.3
0B6D:  BCF    03.5
0B6E:  CALL   13D
0B6F:  BSF    0A.3
....................           printf(lcd_putc, "%3.0ld", setval); 
0B70:  MOVLW  03
0B71:  MOVWF  04
0B72:  MOVF   55,W
0B73:  BSF    03.5
0B74:  MOVWF  2E
0B75:  BCF    03.5
0B76:  MOVF   54,W
0B77:  BSF    03.5
0B78:  MOVWF  2D
0B79:  BCF    0A.3
0B7A:  BCF    03.5
0B7B:  GOTO   434
0B7C:  BSF    0A.3
....................           temp = setval-high; 
0B7D:  MOVF   55,W
0B7E:  BSF    03.5
0B7F:  MOVWF  2E
0B80:  BCF    03.5
0B81:  MOVF   54,W
0B82:  BSF    03.5
0B83:  MOVWF  2D
0B84:  BCF    0A.3
0B85:  BCF    03.5
0B86:  CALL   18B
0B87:  BSF    0A.3
0B88:  BSF    03.1
0B89:  MOVF   7A,W
0B8A:  BSF    03.5
0B8B:  MOVWF  30
0B8C:  MOVF   79,W
0B8D:  MOVWF  2F
0B8E:  MOVF   78,W
0B8F:  MOVWF  2E
0B90:  MOVF   77,W
0B91:  MOVWF  2D
0B92:  BCF    03.5
0B93:  MOVF   4F,W
0B94:  BSF    03.5
0B95:  MOVWF  34
0B96:  BCF    03.5
0B97:  MOVF   4E,W
0B98:  BSF    03.5
0B99:  MOVWF  33
0B9A:  BCF    03.5
0B9B:  MOVF   4D,W
0B9C:  BSF    03.5
0B9D:  MOVWF  32
0B9E:  BCF    03.5
0B9F:  MOVF   4C,W
0BA0:  BSF    03.5
0BA1:  MOVWF  31
0BA2:  BCF    0A.3
0BA3:  BCF    03.5
0BA4:  GOTO   4BA
0BA5:  BSF    0A.3
0BA6:  MOVF   7A,W
0BA7:  MOVWF  47
0BA8:  MOVF   79,W
0BA9:  MOVWF  46
0BAA:  MOVF   78,W
0BAB:  MOVWF  45
0BAC:  MOVF   77,W
0BAD:  MOVWF  44
....................           delay_ms (200); 
0BAE:  MOVLW  C8
0BAF:  BSF    03.5
0BB0:  MOVWF  3B
0BB1:  BCF    0A.3
0BB2:  BCF    03.5
0BB3:  CALL   004
0BB4:  BSF    0A.3
....................       }   //start_stop_check 
0BB5:  GOTO   462
....................        
....................       // Nhan nut Start: sau chinh  
....................       else { 
....................          if (temp > 0) { 
0BB6:  BSF    03.5
0BB7:  CLRF   30
0BB8:  CLRF   2F
0BB9:  CLRF   2E
0BBA:  CLRF   2D
0BBB:  BCF    03.5
0BBC:  MOVF   47,W
0BBD:  BSF    03.5
0BBE:  MOVWF  34
0BBF:  BCF    03.5
0BC0:  MOVF   46,W
0BC1:  BSF    03.5
0BC2:  MOVWF  33
0BC3:  BCF    03.5
0BC4:  MOVF   45,W
0BC5:  BSF    03.5
0BC6:  MOVWF  32
0BC7:  BCF    03.5
0BC8:  MOVF   44,W
0BC9:  BSF    03.5
0BCA:  MOVWF  31
0BCB:  BCF    0A.3
0BCC:  BCF    03.5
0BCD:  CALL   602
0BCE:  BSF    0A.3
0BCF:  BTFSS  03.0
0BD0:  GOTO   3D7
....................             output_high (RELAY_UPPER); 
0BD1:  BSF    03.5
0BD2:  BCF    06.2
0BD3:  BCF    03.5
0BD4:  BSF    06.2
....................             upper_on = 1; 
0BD5:  BSF    56.1
....................          } 
0BD6:  GOTO   3F5
....................          else if (temp <0) { 
0BD7:  MOVF   47,W
0BD8:  BSF    03.5
0BD9:  MOVWF  30
0BDA:  BCF    03.5
0BDB:  MOVF   46,W
0BDC:  BSF    03.5
0BDD:  MOVWF  2F
0BDE:  BCF    03.5
0BDF:  MOVF   45,W
0BE0:  BSF    03.5
0BE1:  MOVWF  2E
0BE2:  BCF    03.5
0BE3:  MOVF   44,W
0BE4:  BSF    03.5
0BE5:  MOVWF  2D
0BE6:  CLRF   34
0BE7:  CLRF   33
0BE8:  CLRF   32
0BE9:  CLRF   31
0BEA:  BCF    0A.3
0BEB:  BCF    03.5
0BEC:  CALL   602
0BED:  BSF    0A.3
0BEE:  BTFSS  03.0
0BEF:  GOTO   3F5
....................             output_high (RELAY_BELOW); 
0BF0:  BSF    03.5
0BF1:  BCF    06.1
0BF2:  BCF    03.5
0BF3:  BSF    06.1
....................             below_on = 1; 
0BF4:  BSF    56.2
....................          } 
....................           
....................          //Dung Relay: 
....................          if (upper_on && high >= setval) { 
0BF5:  BTFSS  56.1
0BF6:  GOTO   42D
0BF7:  MOVF   55,W
0BF8:  BSF    03.5
0BF9:  MOVWF  2E
0BFA:  BCF    03.5
0BFB:  MOVF   54,W
0BFC:  BSF    03.5
0BFD:  MOVWF  2D
0BFE:  BCF    0A.3
0BFF:  BCF    03.5
0C00:  CALL   18B
0C01:  BSF    0A.3
0C02:  MOVF   7A,W
0C03:  BSF    03.5
0C04:  MOVWF  30
0C05:  MOVF   79,W
0C06:  MOVWF  2F
0C07:  MOVF   78,W
0C08:  MOVWF  2E
0C09:  MOVF   77,W
0C0A:  MOVWF  2D
0C0B:  BCF    03.5
0C0C:  MOVF   4F,W
0C0D:  BSF    03.5
0C0E:  MOVWF  34
0C0F:  BCF    03.5
0C10:  MOVF   4E,W
0C11:  BSF    03.5
0C12:  MOVWF  33
0C13:  BCF    03.5
0C14:  MOVF   4D,W
0C15:  BSF    03.5
0C16:  MOVWF  32
0C17:  BCF    03.5
0C18:  MOVF   4C,W
0C19:  BSF    03.5
0C1A:  MOVWF  31
0C1B:  BCF    0A.3
0C1C:  BCF    03.5
0C1D:  CALL   602
0C1E:  BSF    0A.3
0C1F:  BTFSC  03.0
0C20:  GOTO   423
0C21:  BTFSS  03.2
0C22:  GOTO   42D
....................             output_low (RELAY_UPPER); 
0C23:  BSF    03.5
0C24:  BCF    06.2
0C25:  BCF    03.5
0C26:  BCF    06.2
....................             upper_on = 0; 
0C27:  BCF    56.1
....................             temp = 0; 
0C28:  CLRF   47
0C29:  CLRF   46
0C2A:  CLRF   45
0C2B:  CLRF   44
....................          } 
0C2C:  GOTO   462
....................          else if (below_on && high <= setval) { 
0C2D:  BTFSS  56.2
0C2E:  GOTO   462
0C2F:  MOVF   55,W
0C30:  BSF    03.5
0C31:  MOVWF  2E
0C32:  BCF    03.5
0C33:  MOVF   54,W
0C34:  BSF    03.5
0C35:  MOVWF  2D
0C36:  BCF    0A.3
0C37:  BCF    03.5
0C38:  CALL   18B
0C39:  BSF    0A.3
0C3A:  MOVF   4F,W
0C3B:  BSF    03.5
0C3C:  MOVWF  30
0C3D:  BCF    03.5
0C3E:  MOVF   4E,W
0C3F:  BSF    03.5
0C40:  MOVWF  2F
0C41:  BCF    03.5
0C42:  MOVF   4D,W
0C43:  BSF    03.5
0C44:  MOVWF  2E
0C45:  BCF    03.5
0C46:  MOVF   4C,W
0C47:  BSF    03.5
0C48:  MOVWF  2D
0C49:  MOVF   7A,W
0C4A:  MOVWF  34
0C4B:  MOVF   79,W
0C4C:  MOVWF  33
0C4D:  MOVF   78,W
0C4E:  MOVWF  32
0C4F:  MOVF   77,W
0C50:  MOVWF  31
0C51:  BCF    0A.3
0C52:  BCF    03.5
0C53:  CALL   602
0C54:  BSF    0A.3
0C55:  BTFSC  03.0
0C56:  GOTO   459
0C57:  BTFSS  03.2
0C58:  GOTO   462
....................             output_low (RELAY_BELOW); 
0C59:  BSF    03.5
0C5A:  BCF    06.1
0C5B:  BCF    03.5
0C5C:  BCF    06.1
....................             below_on = 0; 
0C5D:  BCF    56.2
....................             temp = 0; 
0C5E:  CLRF   47
0C5F:  CLRF   46
0C60:  CLRF   45
0C61:  CLRF   44
....................          }    
....................       }//Star == 1 
0C62:  GOTO   13F
....................        
....................    }//while true 
.................... }// Main 
....................  
0C63:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
